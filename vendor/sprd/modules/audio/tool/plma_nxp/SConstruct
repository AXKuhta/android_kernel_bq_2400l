import os
import platform
import subprocess

env = Environment(work = os.environ['PWD'], CCFLAGS = '-g')

# use PATH from OS
env.Append(ENV = {'PATH' : os.environ['PATH']})

# handle command line arguments
crosscompile_for_arm32 = int(ARGUMENTS.get('arm', 0))
crosscompile_for_arm64 = int(ARGUMENTS.get('arm64', 0))
variant = ARGUMENTS.get('variant', None)
extra_ccflags = ARGUMENTS.get('extra_ccflags', None)
extra_ldflags = ARGUMENTS.get('extra_ldflags', None)

if ARGUMENTS.get('sparse', 0):
	env.Replace(CC='cgcc')

if crosscompile_for_arm32:
	platform_system = "Linux"
	platform_machine = "armv7l"
elif crosscompile_for_arm64:
	platform_system = "Linux"
	platform_machine = "aarch64"
else:
	platform_system = platform.system()
	platform_machine = platform.machine()

if ARGUMENTS.get('hid', 0):
	hid_enabled = int(ARGUMENTS.get('hid', 0))
else:
	# hid is default enabled when library exists, except when cross compiling for arm (udev missing)
	if crosscompile_for_arm32 or crosscompile_for_arm64:
		hid_enabled = 0
	else:
		hid_enabled = os.path.isfile('hal/lib/' + platform_system + "-" + platform_machine + "/libusbgio_api_static.a")

if ARGUMENTS.get('sysfs', 0):
	sysfs_enabled = int(ARGUMENTS.get('sysfs', 0))
else:
	# sysfs is default enabled when building for Linux
	sysfs_enabled = (platform_system == "Linux")

if ARGUMENTS.get('mixer', 0):
	mixer_enabled = int(ARGUMENTS.get('mixer', 0))
else:
	if crosscompile_for_arm32 or crosscompile_for_arm64:
		# when cross compiling for ARM, libasound is not available
		mixer_enabled = 0
	else:
		# alsa mixer ctl is default enabled when building for Linux
		mixer_enabled = platform_system == "Linux"

if ARGUMENTS.get('tiberius', 0):
	tiberius_enabled = int(ARGUMENTS.get('tiberius', 0))
else:
	# tiberius is default enabled when building for Linux
	tiberius_enabled = (platform_system == "Linux")
        
if crosscompile_for_arm32:
	env.Replace( CC='arm-linux-gnueabihf-gcc',
		     AR='arm-linux-gnueabihf-ar',
		     RANLIB='arm-linux-gnueabihf-ranlib')
elif crosscompile_for_arm64:
	env.Replace( CC='aarch64-linux-gnu-gcc',
		     AR='aarch64-linux-gnu-ar',
		     RANLIB='aarch64-linux-gnu-ranlib')


env.Append(CCFLAGS = ['-DTFA_DEBUG'])
if variant:
	env.Append(CCFLAGS = ["-D"+variant])
if extra_ccflags:
	env.Append(CCFLAGS = [extra_ccflags])
	
if ARGUMENTS.get('m32', 0):
	env.Append( CCFLAGS = ['-m32','-O0','-DLXSCRIBO','-DLOGERR'])#,'-DSCRIBOVERBOSE'])                 
	env.Append( LINKFLAGS = '-g -m32')
	env ['_LIBFLAGS'] = '-m32 -Wl,--start-group ' + env ['_LIBFLAGS'] + ' -Wl,--end-group'
else:
	env.Append( CCFLAGS = ['-O0','-DLXSCRIBO','-DLOGERR'])#,'-DSCRIBOVERBOSE'])                
	env.Append( LINKFLAGS = '-g ')
	env ['_LIBFLAGS'] = '-Wl,--start-group ' + env ['_LIBFLAGS'] + ' -Wl,--end-group'

if extra_ldflags:
	env.Append(LINKFLAGS = [extra_ldflags])

env.Append( CCFLAGS = ['-Wall', '-Wsign-compare'] ) # -fPIC
env.Append( CCFLAGS = ['-Wno-missing-braces'] ) # Ignore specific warning types
#env.Append( CCFLAGS = ['-W', '-Wall', '-Wno-unused', '-Winit-self', '-Wpointer-arith', '-std=c99',
#                       '-Werror=return-type', '-Werror=non-virtual-dtor', '-pedantic',
#                       '-Werror=address', '-Werror=sequence-point'] )  	
	
env.Append( CPPPATH = [ './app/exTfa98xx/inc',
			'./app/climax/inc',
			'./app/climax/src/cli',
			'./srv/inc',
			'./srv/src/iniFile', #only for ini file parsing
			'./tfa/inc',
			'./tfa/linux-user-inc',
			'./utl/inc',
			'./hal/inc',
			'./hal/src/lxScribo'])

if hid_enabled:
	env.Append( CCFLAGS = ['-DHAL_HID'])
	env.Append( CPPPATH = [ './hal/inc/usb_gio/',
				'./hal/inc/usb_gio/libbase'])
	hid_lib_name = "libusbgio_api_static"
	hid_libs = [hid_lib_name]
	hid_dep_libs =['udev', 'stdc++'] 
	hid_libpath = 'hal/lib/' + platform_system + "-" + platform_machine
else:
	hid_libs = []
	hid_dep_libs = []
	hid_libpath = ""

common_libs = ['m','pthread','rt', 'dl']

if sysfs_enabled:
	env.Append( CCFLAGS = ['-DHAL_SYSFS'])
	
if mixer_enabled:
	env.Append( CCFLAGS = ['-DHAL_MIXER'])
	mixer_lib =['asound']
else:
	mixer_lib =[]

if tiberius_enabled:
	env.Append( CCFLAGS = ['-DHAL_TIBERIUS'])

############################## versions.h

def get_cmd_output(cmd, input=None, cwd=None, env=None):
    pipe = subprocess.Popen(cmd, shell=True, cwd=cwd, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    (output, errout) = pipe.communicate(input=input)
    return output

version=get_cmd_output("git describe --tags --dirty --match \"v[0-9]*.[0-9]*.[0-9]*\"")
version = version.replace("\n", "")

print "Building version: " + version

version_build_template="""/*
* This file is automatically generated by the build process
* DO NOT EDIT!
*/

#ifndef _VERSIONS_H
#define _VERSIONS_H

#define TFA98XX_GIT_VERSIONS "%s"

#endif /* _VERSIONS_H */
"""

def version_action(target, source, env):
    """
    Generate the version file with the current version in it
    """
    contents = version_build_template % (version)
    fd = open(target[0].path, 'w')
    fd.write(contents)
    fd.close()
    return 0

build_version = env.Command('tfa/inc/versions.h', [], Action(version_action))
env.AlwaysBuild(build_version)


############################## climax app
climax_src = [
			'./app/climax/src/cliCommands.c',
			'./app/climax/src/climax.c',
			'./app/climax/src/cli/cmdline.c' ]

############################## container example 
cnt_example_src = [	'./app/exTfa98xx/src/main_container.c' ]
  
############################### tfa98xx service layer
tfa98xx_srv_src = [
			'./srv/src/tfaContainerWrite.c',
			'./srv/src/tfaContUtil.c',
			'./srv/src/iniFile/minIni.c',                      
			'./srv/src/Tfa98API.c',
			'./srv/src/tfa98xxDRC.c',
			'./srv/src/tfa98xxFilterCalculations.c',
			'./srv/src/tfa98xxCalculations.c',
			'./srv/src/tfa98xxCalibration.c',
			'./srv/src/tfa98xxLiveData.c',
			'./srv/src/tfa98xxDiagnostics.c']

############################### tfa98xx tfa layer
tfa98xx_tfa_src  = [
			'./tfa/src/tfa_debug.c',
			'./tfa/src/tfa_hal.c',
			'./tfa/src/tfa_osal.c',
			'./tfa/src/tfa_dsp.c',
			'./tfa/src/tfa_container.c',
			'./tfa/src/tfa_container_crc32.c',
			'./tfa/src/tfa_init.c',
			'./utl/src/tfaOsal.c' ]

############################### tfa98xx hal layer
lxscribo_src =  [ 	
			'./hal/src/lxScribo/lxI2c.c',
			'./hal/src/lxScribo/lxDummy.c',
			'./hal/src/lxScribo/lxScribo.c',
			'./hal/src/lxScribo/lxScriboProtocol.c',
			'./hal/src/lxScribo/lxScriboProtocolUdp.c',
			'./hal/src/lxScribo/lxScriboSerial.c',
			'./hal/src/lxScribo/udp_sockets.c',
			'./hal/src/lxScribo/lxScriboSocket.c',
			'./hal/src/lxScribo/hal_utils.c' ]             
if  hid_enabled:
	   lxscribo_src.append('./hal/src/lxScribo/lxHid.c')
if sysfs_enabled:
	   lxscribo_src.append('./hal/src/lxScribo/lxSysfs.c')  
if mixer_enabled:
	   lxscribo_src.append('./hal/src/lxScribo/lxAlsaMixerCtl.c')
if tiberius_enabled:
	   lxscribo_src.append('./hal/src/lxScribo/lxTiberius.c')
	   lxscribo_src.append('./hal/src/lxScribo/lxDspMmap.c')
tfa98xx_hal_src =  [ './hal/src/NXP_I2C.c'] + lxscribo_src

############################## scribo
scribo_srv_src =  [ 
			'./hal/src/lxScribo/scribosrv/i2cserver.c',
			'./hal/src/lxScribo/scribosrv/cmd.c' ]                       

############################## scons arguments 			
if ARGUMENTS.get('cli', 0):
###create new c code for new cmdline arguments
	#specify for both, then it works fine
	GENGETOPT = 'gengetopt'
	#GENGETOPT=os.environ['HOME']+'/bin/gengetopt'
	t=env.Command('./app/climax/src/cli/cmdline.h', './app/climax/src/cli/climax_cmdline.ggo', GENGETOPT+"  -i $SOURCE --output-dir=./app/climax/src/cli")
	t=env.Command('./app/climax/src/cli/cmdline.c', './app/climax/src/cli/climax_cmdline.ggo', GENGETOPT+"  -i $SOURCE --output-dir=./app/climax/src/cli")
	Clean(t, ['./app/climax/src/cli/cmdline.c', './app/climax/src/cli/cmdline.h'])

else:
	tfa_src= tfa98xx_tfa_src
	if ARGUMENTS.get('TFA9887', 0):
		###build for tfa9887 only
		env.Append( CCFLAGS = ['-DTFA9887'])
		tfa_lib = "tfa9887"
	elif ARGUMENTS.get('TFA9890', 0):
		###build for tfa9890 only
		env.Append( CCFLAGS = ['-DTFA9890'])
		tfa_lib='tfa9890'
	elif ARGUMENTS.get('TFA9887B', 0):
		###build for tfa9887B only
		env.Append( CCFLAGS = ['-DTFA9887B'])
		tfa_lib='tfa9887B'
	elif ARGUMENTS.get('TFA9897', 0):
		###build for tfa9897 only
		env.Append( CCFLAGS = ['-DTFA9897'])
		tfa_lib='tfa9897'
	else:
		###default build
		env.Append( CCFLAGS = ['-DTFA98XX_FULL'])
		tfa_lib = 'tfa98xx'

	hid_objs = []
	hid_objs_dir = "hid_objs"
	if hid_enabled:
		if not os.path.exists(hid_objs_dir):
			os.mkdir(hid_objs_dir)
		os.chdir(hid_objs_dir)
		# extract objects from the hid static library, so they can be included in tfa98xx.a
		subprocess.call([env['AR'], "x", "../" + hid_libpath + "/" + hid_lib_name + ".a"]) 
		os.chdir("..")
		hid_objs1 = os.listdir(hid_objs_dir)
		for hid_obj in hid_objs1:
			hid_objs.append(hid_objs_dir + "/" + hid_obj)

	tfa_lib_a = env.Library(tfa_lib, [tfa_src, tfa98xx_srv_src , tfa98xx_hal_src, hid_objs])
	tfa_lib_so = env.SharedLibrary(tfa_lib, [tfa_src, tfa98xx_srv_src , tfa98xx_hal_src], LIBS=[common_libs, hid_libs, hid_dep_libs, mixer_lib], LIBPATH=['.', hid_libpath])

	# make sure that also the extracted hid library objects are cleaned up
	Clean(tfa_lib_a, hid_objs_dir)

	if ARGUMENTS.get('static', 0):
		# static executable
		env.Program('exTfa98xx_container', [cnt_example_src, tfa_lib_a], LIBS=[common_libs, hid_dep_libs, mixer_lib], LIBPATH=['.'], LINKFLAGS="--static")
		env.Program('climax', [climax_src, scribo_srv_src, tfa_lib_a], LIBS=[common_libs, hid_dep_libs, mixer_lib], LIBPATH=['.'], LINKFLAGS="--static")
	elif ARGUMENTS.get('shared', 0):
		# link dynamicly to both system libraries and tfa98xx library
		env.Program('exTfa98xx_container', [cnt_example_src], LIBS=[tfa_lib_so, common_libs], LIBPATH=['.'])
		env.Program('climax', [climax_src, scribo_srv_src], LIBS=[tfa_lib_so, common_libs], LIBPATH=['.'])
	else:
		# link dynamicly to system libraries and staticly to tfa98xx library
		env.Program('exTfa98xx_container', [cnt_example_src, tfa_lib_a], LIBS=[common_libs, hid_dep_libs, mixer_lib], LIBPATH=['.'])
		env.Program('climax', [climax_src, scribo_srv_src, tfa_lib_a], LIBS=[common_libs, hid_dep_libs, mixer_lib], LIBPATH=['.'])

