#!/usr/bin/env python
#
# Copyright (C) 2015 BayLibre
# Author: Sebastien Jan <sjan@baylibre.com>
#
# Displays a UI with various buttons controlling use-cases
# Use-cases are configured through the menulist text file
# Addtional features here: specific tap-detection activation
#
# (Based on the reference hello_world pyton example:
# http://www.pygtk.org/pygtk2tutorial/ch-GettingStarted.html#sec-HelloWorld )
#
import threading
import time
import gobject
import subprocess
import re
import struct
import string
from evdev import InputDevice, ecodes
from select import select

import pygtk
pygtk.require('2.0')
# intercept the warning generated if no DISPLAY is configured when importing gtk
# For that, convert this warning to an error, and handle it through an exception
import warnings
warnings.filterwarnings('error', module='gtk')
try:
	import gtk
except:
	# Probably no DISPLAY defined, cannot start UI, exit with status '1'
	import sys
	sys.exit("Error: No DISPLAY available, leaving")

import os
import commands

# ############# High level design ################
# 1) This app is first an audio test application
#   As such, it reads the audio use-cases to expose from a 'menulist' file
#   (syntax: [UC name] = [program or script to run])
#   and generates a button for each UC. When a button is pressed, the associated
#   script is started. This blocks the application. When the script finishes,
#   the application continues its execution.
# 2) A dedicated tap-detection mode was added to this app. It is disabled
#   by default.
#   A button allows enabling this mode, which calls enable / disable scripts,
#   displays the tap-detection interface and hides the regular audio UC
#   (which are currently considered non-compatible with the tap-detection mode).
#   Tap-detection use-cases are pre-defined and hard-coded into the application.
#   For each use-case, the tap-sequence is displayed, and a firelight indicates
#   detection.
#   As of now, once this tap-detection mode is enabled, a detection function
#   is called each 100ms. Its role is to check if a detection occurred.
#   This can be done by reading the content of a file for example.
#   Upon detection of a tap-detection event, the related use-case firelight
#   switches to green for some pre-defined time.
#   A debug log can be displayed (disabled by default).
#   Debug traces are also printed to a debug file in text format.
#   Some debug features (debug buttons) can be enabled for developing the app.

# ############# API to use (programmers' help) ###
# To display a UC detection: self.pattern_detect_display
# To trace anything to the debug log: self.tap_dbg_add_str

# ############## Editable constants ##############
tap_det_start_scr = "tapdet-start"	# tap detection start script seed name
tap_det_stop_scr = "tapdet-stop"	# tap detection stop script
tap_det_get = "tapdet-get"	# tap detection script to get tap status
tap_det_dump = "tapdet-dump"	# tap detection script to get tap information
tap_det_dbg_fname = "debug.txt"	# tap detection debug log (same as debug window)
debug_mode = False		# dynamically enable debug trace and/or widgets
input_mode_thread = True	# enable thread reading input file
input_mode_climax_poll = False	# enable polling with external climax script
tap_det_dev_name = "tfa98xx-tapdetect"	# input device name

# Tap-detection patterns to display:
# Any number of patterns can be described. They are indexed from 1, and
# later referred to by this index (the index is displayed on the UI for
# the corresponding pattern)
# O = Tap, . = short interval, - = long interval
#tap_det_patterns = [ "O.O", "O.O.O", "O.O-O", "O-O.O" ]
tap_det_patterns = [ "OO", "OOO", "O-O-O", "OO-O", "O-OO", "O-OO-O", "OOO-O", "O-O-OO" ]

# ################################################

class InputThread(threading.Thread):
    """ A worker thread that waits on an input device file for events to handle.

	Opens and select() on the input device 'name' passed as constructor
	argument.

	Requires a pointer to the gui for displaying the recognized pattern.

	Select is called with a timeout to allow a graceful termination of
	the worker thread.

	Ask the thread to stop by calling its join() method.
    """
    def __init__(self, name, gui):
	super(InputThread, self).__init__()
	self.gui = gui
	self.name = name
	self.stoprequest = threading.Event()

    def run(self):
	i = 0
	while(True):
		try:
			dev = InputDevice('/dev/input/event' + str(i))
			# if dev.name == "wimtaptest": #uinput-sample":
			if dev.name == self.name:
				break
			else:
				i = i + 1
		except OSError:
			print "No devices could be found"
			return False
	print "InputThread: Reading information from event: {} (/dev/input/event{})".format(dev.name, i)

	# As long as we weren't asked to stop, try to read events from the
	# device
	while not self.stoprequest.isSet():
		r,w,x = select([dev], [], [], 0.2)	# 200ms timetout
		if not r:
			# woken-up by timeout
			continue
		for event in dev.read():
			if debug_mode:
				print event
			if event.type == ecodes.EV_KEY:
				if event.code == ecodes.BTN_1:
					pattern_id = int(1)
				elif event.code == ecodes.BTN_2:
					pattern_id = int(2)
				elif event.code == ecodes.BTN_3:
					pattern_id = int(3)
				elif event.code == ecodes.BTN_4:
					pattern_id = int(4)
				elif event.code == ecodes.BTN_5:
					pattern_id = int(5)
				elif event.code == ecodes.BTN_6:
					pattern_id = int(6)
				elif event.code == ecodes.BTN_7:
					pattern_id = int(7)
				elif event.code == ecodes.BTN_8:
					pattern_id = int(8)
				elif event.code == ecodes.BTN_9:
					pattern_id = int(9)
				else:
					print "Unkown event:"
					print event
					continue

				if (pattern_id != 0 and event.value == 1):
					print "Recognized pattern {}".format(pattern_id)
					self.gui.pattern_detect_display(pattern_id)

    def join(self, timeout=None):
	self.stoprequest.set()
	super(InputThread, self).join(timeout)


class GetPath:

    def path(self, widget, data=None):
	print " => " + data
	commands.getoutput('bash ' + data)

    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget, data=None):
	self.dbg_log_file.close()
        gtk.main_quit()

    def update_display(self):
    	# Trick to update window in the middle of a callback
	while gtk.events_pending():
		gtk.main_iteration(False)

    def tap_dbg_add_str(self, str):
	self.tap_buffer.insert_at_cursor(str)
	# scroll to end of buffer to see last added trace
	self.tap_text.scroll_to_mark(self.tap_buffer.get_insert(), 0)
	# also write to trace file
	self.dbg_log_file.write(str)

    # Tap-detection periodic verification callback
    #  Principle: Call a script on a periodic basis, and check a generated file
    #  content.
    #  Depending on the file content, trigger a detection display, and update
    #  the debug log
    def check_file(self):
	if self.tap_enabled == False:
		# will stop the timer
		return False

	# tempo can be used to do nothing in this callback for some periods
	if self.tempo > 0:
		self.tempo = self.tempo - 1
		return True

	# Run external script to get data
	s = subprocess.check_output('bash ' + self.scriptsdir + tap_det_get,
					stderr=subprocess.STDOUT, shell=True)
	# sample expected pattern:
	# xmem[0x0122] : 0x000001
	if s.split(" ")[2] == "0x000001":
		print "pattern detected!"
		# Get pattern data
		s = subprocess.check_output('bash ' + self.scriptsdir + tap_det_dump,
						stderr=subprocess.STDOUT, shell=True)
		# Find recognized pattern
		# kind of expected output:
		# xmem[0x010f] : 0xfffffffe
		# xmem[0x0120] : 0x000000
		# xmem[0x0110] : 0x000000
		# xmem[0x0111] : 0x000000
		# xmem[0x0112] : 0x000000
		# xmem[0x0113] : 0x000000
		# xmem[0x0114] : 0x000000
		# xmem[0x0118] : 0x000000
		# xmem[0x0119] : 0x000000
		# xmem[0x011a] : 0x000000
		# xmem[0x011b] : 0x000000
		# xmem[0x011c] : 0x000000
		# 0x122 < 0x0000 (memtype=1)
		m = re.search("xmem\[0x010f\] : (0x\w*)", s)
		if m:
			# print "Found value: <{}>".format(m.group(1))
			if m.group(1) == '0xffffffff':
				self.tap_dbg_add_str("More than 4 taps detected! (flagTapPattern = -1)\n")
			elif m.group(1) == '0xfffffffe':
				self.tap_dbg_add_str("Single tap detected! (flagTapPattern = -2)\n")
			elif m.group(1) == '0x000000':
				self.tap_dbg_add_str("Unrecognized pattern! (flagTapPattern = 0)\n")
			else:
				pattern_id = int(m.group(1), 16)
				# print "Recognized pattern {}".format(pattern_id)
				#self.tap_dbg_add_str("Recognized pattern {}\n".format(pattern_id))
				self.pattern_detect_display(pattern_id)
				self.tap_dbg_add_str(s)

	return True

    def tap_det_action(self, widget, data=None):    
    	if self.tap_enabled == False:
    		self.tap_det.set_label("Enabling...")
		# Hide quit button
		self.none.hide()
    		self.update_display()
		self.hbox_tap.show()
    		self.tap_enabled = True
    		# Hide other use-cases (not compatible)
    		self.box_reg.hide()
    		self.update_display()
    		# Run external command to start tap detection
		print "tap detection start log:"
		s = subprocess.check_output('bash ' + self.scriptsdir + tap_det_start_scr + '-mod',
						stderr=subprocess.STDOUT, shell=True)
		print s
		s = subprocess.Popen('bash ' + self.scriptsdir + tap_det_start_scr + '-record',
						stderr=subprocess.STDOUT, shell=True)
		print s
		s = subprocess.check_output('bash ' + self.scriptsdir + tap_det_start_scr + '-climax',
						stderr=subprocess.STDOUT, shell=True)
		print s
		print "tap detection started."

		# Get and display tap-detection events
		if input_mode_climax_poll:
			# Add a timer callback to check for tap-detection events
			self.timer = gobject.timeout_add(1000, self.check_file)
		if input_mode_thread:
			# Alternative implementation: start a thread retrieving events
			# from an input device
			self.thread = InputThread(name=tap_det_dev_name, gui=self)
			self.thread.start()

    		self.tap_det.set_label("Disable tap detection")

    	else:
    		self.hbox_tap.hide()
    		self.tap_det.set_label("Disabling...")
    		self.update_display()
		self.tap_enabled = False
		if input_mode_thread:
			self.thread.join()
   		# Run external command to stop tap detection
		print "tap detection stop log:"
		s = subprocess.check_output('bash ' + self.scriptsdir + tap_det_stop_scr,
						stderr=subprocess.STDOUT, shell=True)
		print s
     		# Display other use-cases (not compatible)
    		self.box_reg.show()
    		self.tap_det.set_label("Enable tap detection")
		# Display qui button
		self.none.show()

    # Tap detection debug log display enable / disable
    def dbg_display_cbk(self, widget, data=None):
    	if widget.get_active() == 0:
    		self.vbox_tap_dbg.hide()
    	else:
    		self.vbox_tap_dbg.show()
		self.sw.set_size_request(300, 200)

    # Tap detection clear debug buffer button
    def tap_det_clear_log(self, widget, data=None):
	self.tap_buffer.set_text("")

    # tap detection patterns related formating

    def pattern_add_str(self, widget, str):
	label = gtk.Label(str)
	widget.pack_start(label, False, False, 0)
	label.show()

    def pattern_add_ball(self, widget, str=None):
	image = gtk.Image()
	image.set_from_file(self.scriptsdir + 'Yellow_ball.png')
	widget.pack_start(image, False, False, 0)
	image.show()
	if str != None:
		self.pattern_add_str(widget, str)

    def pattern_add_dot(self, widget, str=None):
	image = gtk.Image()
	image.set_from_file(self.scriptsdir + 'primitive-dot.png')
	widget.pack_start(image, False, False, 0)
	image.show()
	if str != None:
		self.pattern_add_str(widget, str)

    def pattern_add_dash(self, widget, str=None):
	image = gtk.Image()
	image.set_from_file(self.scriptsdir + 'dash.png')
	widget.pack_start(image, False, False, 0)
	image.show()
	if str != None:
		self.pattern_add_str(widget, str)

    def tap_det_dbg(self, widget, index):
	self.pattern_detect_display(index)

    # Create UC text, with pattern
    # index starts at 1 for 1st row
    def pattern_add_text(self, index, str):
	hbox = gtk.HBox(False, 0)
	self.table.attach(hbox, 0, 1, index - 1, index)
	# UC label
	label = gtk.Label('{} '.format(index, " "))
	hbox.pack_start(label, False, False, 0)
	label.show()
	# UC text
	for i in range(0, len(str)):
		if str[i] == 'O':
			self.pattern_add_ball(hbox)
		elif str[i] == '.':
			self.pattern_add_dot(hbox)
		elif str[i] == '-':
			self.pattern_add_dash(hbox)
		else:
			print "Error: unkown char: " + str[i]
	label = gtk.Label('{} '.format("     "))
	hbox.pack_start(label, False, False, 0)
	label.show()
	hbox.show()


    # Creates lights into the 2nd column if the table,
    # indexed through self.tap_uc dictionary
    # index starts at 1 for 1st row
    def pattern_add_light(self, index):
    	self.tap_uc[index] = gtk.HBox(False, 0)
	# self.hbox_tap1 = gtk.HBox(False, 0)
	self.table.attach(self.tap_uc[index], 1, 2, index -1,  index)
	self.tap_uc[index].image_off = gtk.Image()
	self.tap_uc[index].image_off.set_from_file(self.scriptsdir + 'Circle_Grey.png')
	self.tap_uc[index].pack_start(self.tap_uc[index].image_off, False, False, 0)
	self.tap_uc[index].image_off.show()

	self.tap_uc[index].image_on = gtk.Image()
	self.tap_uc[index].image_on.set_from_file(self.scriptsdir + 'Circle_Green.png')
	self.tap_uc[index].pack_start(self.tap_uc[index].image_on, False, False, 0)
	self.tap_uc[index].image_on.hide()

	if debug_mode == True:
		# debug button, to trigger tap detectio event (debug only)
		button = gtk.Button("dbg")
		button.connect("clicked", self.tap_det_dbg, index)
		self.tap_uc[index].pack_start(button, False, False, 0)
		button.show()

	self.tap_uc[index].show()

    def pattern_light_off(self, index):
	self.tap_uc[index].image_off.show()
	self.tap_uc[index].image_on.hide()

    def pattern_light_on(self, index):
	self.tap_uc[index].image_off.hide()
	self.tap_uc[index].image_on.show()

    def tap_disp_time_out(self, index):
	self.pattern_light_off(index)

    # Enable the light corresponding to the detected UC and keep it ON for 3s
    def pattern_detect_display(self, index):
	# disable all lights
	for i in range(1, len(tap_det_patterns) + 1):
		self.pattern_light_off(i)
	# log the event
	self.tap_dbg_add_str('Detected tap-sequence {}\n'.format(index))
	if index > len(tap_det_patterns):
		return
	# enable the light for this UC
	self.pattern_light_on(index)
	# prepare 3s timer for disabling this light
	gobject.timeout_add(3000, self.tap_disp_time_out, index)


    def __init__(self):
        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)
        self.window.set_title("TFA98xx test")
        # self.window.set_default_size(600,300)

        # Sets the border width of the window.
        self.window.set_border_width(10)

	# create a container
	self.box = gtk.VBox(False, 10);
	self.box.set_border_width(10)
	self.window.add(self.box);


	# Populate window with drive names buttons
#	dirs = os.listdir("/dev/disk/by-path")
	# Get path to current working dir, used to get the scripts list and the scripts
	self.scriptsdir = os.path.dirname(os.path.abspath(__file__)) + '/'
	dirs = commands.getoutput('cat ' + self.scriptsdir +'menulist').split('\n')

	#self.label1 = gtk.Label("UDA98XX test application")
	#self.label1.set_alignment(0.5,0)
	#self.box.pack_start(self.label1, False, False, 0)
	#self.label1.show()

	# container hbox for tap detection
	self.hbox_tap = gtk.HBox(False, 10)
	self.box.pack_start(self.hbox_tap, False, False, 0)
	self.hbox_tap.show()

	# container vbox for tap-detection status
	self.vbox_tap = gtk.VBox(False, 10);
	self.hbox_tap.pack_start(self.vbox_tap, False, False, 5)
	self.vbox_tap.show()

	# container vbox for tap-detection debug
	self.vbox_tap_dbg = gtk.VBox(False, 0);
	self.hbox_tap.pack_start(self.vbox_tap_dbg, True, True, 5)
	# hidden by default
	self.vbox_tap_dbg.hide()

	# create and open debug log file
	self.dbg_log_file = open(tap_det_dbg_fname, "w")

	# Tap-detection debug textview
        self.sw = gtk.ScrolledWindow()
	self.sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
	self.tap_text = gtk.TextView()
	self.tap_buffer = self.tap_text.get_buffer()
	self.sw.add(self.tap_text)
	self.sw.show()
	self.vbox_tap_dbg.pack_start(self.sw , False, False, 5)
	self.tap_text.show()
	self.tap_text.set_editable(False)
	self.tap_text.set_cursor_visible(False)

	# Tap detection clear debug log button
	button = gtk.Button("Clear log")
	button.connect("clicked", self.tap_det_clear_log, None)
	self.vbox_tap_dbg.pack_start(button, False, False, 0)
	button.show()


	# Use a table to display the use-cases
	self.table = gtk.Table(len(tap_det_patterns), 2, False)
	self.vbox_tap.pack_start(self.table, False, False, 0)
	self.table.set_row_spacings(5)
	self.table.set_col_spacings(5)
	self.table.show()


	# Define UC text description
	index = 1
	for pattern in tap_det_patterns:
		self.pattern_add_text(index, pattern)
		index = index + 1

	# add lights
	self.tap_uc = {}
	for i in range(1, len(tap_det_patterns) + 1):
		self.pattern_add_light(i)


	self.tap_enabled = False
    	self.hbox_tap.hide()

	self.tempo = 0

	# Use a table to display symbols descriptions
	table = gtk.Table(3, 1, False)
	self.vbox_tap.pack_start(table, False, False, 0)
	table.set_row_spacings(0)
	table.set_col_spacings(5)
	table.show()
	# Tap
	hbox = gtk.HBox(False, 0)
	table.attach(hbox, 0, 1, 0,1)
	self.pattern_add_ball(hbox, ' Tap')
	hbox.show()
	# Long interval
	hbox = gtk.HBox(False, 0)
	table.attach(hbox, 0, 1, 1, 2)
	self.pattern_add_str(hbox, ' ')
	self.pattern_add_dash(hbox, '  Long interval')
	hbox.show()
	# Short interval
	# hbox = gtk.HBox(False, 0)
	# table.attach(hbox, 0, 1, 2, 3)
	# self.pattern_add_str(hbox, '  ')
	# self.pattern_add_dot(hbox, '  Short interval')
	# hbox.show()

	# checkbox for displaying debug trace
	button = gtk.CheckButton("Display debug trace")
	button.connect("toggled", self.dbg_display_cbk, "check button 1")
	self.vbox_tap.pack_start(button, False, False, 0)
	button.show()

	# Tap detection enable / disable / status button
	self.tap_det = gtk.Button("Enable tap detection")
	self.tap_det.connect("clicked", self.tap_det_action, None)
	self.box.pack_start(self.tap_det, False, False, 0)
	self.tap_det.show()

	separator = gtk.HSeparator()
	self.box.pack_start(separator, False, False, 0)
	separator.show()

	# regular buttons
	self.box_reg = gtk.VBox(False, 10);
	self.box.set_border_width(0)
        self.box.pack_start(self.box_reg, False, False, 0)
	self.box_reg.show()

	for ent in dirs:
		# extract partition name
		ent_name = ent.split('=')[0].rstrip(':')
		ent_cmd = ent.split('=')[1].strip(' ')
		ent_type = ''
		self.entry = gtk.Button(ent_name + ent_type)
	        self.entry.connect("clicked", self.path, self.scriptsdir + ent_cmd)
	        self.box_reg.pack_start(self.entry, False, False, 0)
        	self.entry.show()

	self.none = gtk.Button("Quit")
        #self.none.connect("clicked", self.path, "")
       	self.none.connect_object("clicked", gtk.Widget.destroy, self.window)
	self.box.pack_start(self.none, False, False, 0)
      	self.none.show()

 	self.window.set_position(gtk.WIN_POS_CENTER)

	# Show remaining objects
	self.box.show()
        self.window.show()

    def main(self):
        gtk.main()

if __name__ == "__main__":
    path = GetPath()
    gtk.gdk.threads_init()
    gtk.gdk.threads_enter()
    path.main()
    gtk.gdk.threads_leave()
