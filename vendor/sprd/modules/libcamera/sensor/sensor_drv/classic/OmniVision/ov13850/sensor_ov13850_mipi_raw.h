/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _SENSOR_OV13850_MIPI_RAW_H_
#define _SENSOR_OV13850_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"
#if defined(CONFIG_CAMERA_ISP_VERSION_V3) ||                                   \
    defined(CONFIG_CAMERA_ISP_VERSION_V4)
#include "parameters/sensor_ov13850_raw_param_main.c"
#else
#endif

#define ov13850_I2C_ADDR_W (0x6c >> 1)
#define ov13850_I2C_ADDR_R (0x6c >> 1)
#define RAW_INFO_END_ID 0x71717567
#define SENSOR_NAME "ov13850_mipi_raw"
#define VENDOR_NUM 1
#define OV13850_FLIP_MIRROR

//#define use_sensor_gain

#define OV13850_RAW_PARAM_COM 0x0000
#define OV13850_RAW_PARAM_OFLIM 0x0007
#define OV13850_OTP_CASE 1
#define OV13850_UPDATE_LNC 1
#define OV13850_UPDATE_WB 2
#define OV13850_UPDATE_LNC_WB 3
#define OV13850_UPDATE_VCM 4

#define OV13850_MIN_FRAME_LEN_PRV 0x5e8

static const SENSOR_REG_T ov13850_common_init[] = {
#if 0
	//XVCLK=24Mhz, SCLK=4x120Mhz, MIPI 640Mbps, DACCLK=240Mhz
	{0x0103, 0x01}, // software reset
	{0x0300, 0x01}, // PLL
	{0x0301, 0x00}, // PLL
	{0x0302, 0x28}, // PLL
	{0x0303, 0x00}, // PLL
	{0x030a, 0x00}, // PLL
	{0x300f, 0x11}, // MIPI 10-bit mode
	{0x3010, 0x01}, // MIPI PHY
	{0x3011, 0x76}, // MIPI PHY
	{0x3012, 0x41}, // MIPI 4 lane
	{0x3013, 0x12}, // MIPI control
	{0x3014, 0x11}, // MIPI control
	{0x3106, 0x00},
	{0x3210, 0x47},
	{0x3500, 0x00}, // exposure HH
	{0x3501, 0x67}, // exposure H
	{0x3502, 0x80}, // exposure L
	{0x3506, 0x00}, // short exposure HH
	{0x3507, 0x02}, // short exposure H
	{0x3508, 0x00}, // shour exposure L
#ifdef use_sensor_gain
	{0x3509, 0x00}, // use sensor gain
#else
	{0x3509, 0x10}, // use real gain
#endif
	{0x350a, 0x00}, // gain H
	{0x350b, 0x10}, // gain L
	{0x350e, 0x00}, // short gain H
	{0x350f, 0x10}, // short gain L
	{0x3601, 0x9c}, // analog control
	{0x3602, 0x02}, // analog control
	{0x3603, 0x48}, // analog control
	{0x3604, 0xa5}, // analog control
	{0x3605, 0x9f}, // analog control
	{0x3607, 0x00}, // analog control
	{0x360a, 0x40}, // analog control
	{0x360b, 0xc8}, // analog control
	{0x360c, 0x4a}, // analog control
	{0x3611, 0x10}, // PLL2
	{0x3612, 0x23},  // PLL2
	{0x3613, 0x33},  // PLL@
	{0x3641, 0x82},
	{0x3660, 0x82},
	{0x3668, 0x20},
	{0x3667, 0xa0},
	{0x3702, 0xa0},
	{0x3703, 0x24},
	{0x3708, 0x3c},
	{0x3709, 0x0d},
	{0x3720, 0x66},
	{0x3722, 0x84},
	{0x3728, 0x00},
	{0x372f, 0x08},
	{0x3710, 0x08},
	{0x3718, 0x10},
	{0x3719, 0x08},
	{0x371c, 0xfc},
	{0x3760, 0x13},
	{0x3761, 0x33},
	{0x3767, 0x24},
	{0x3768, 0x0c},
	{0x3769, 0x34},
	{0x3d84, 0x00},  // OTP program disable
	{0x3d85, 0x17},  // OTP power up load data enable, power load setting enable, software load setting enable
	{0x3d8c, 0x73},  // OTP start address H
	{0x3d8d, 0xbf},  // OTP start address L
	{0x3800, 0x00},  // H crop start H
	{0x3801, 0x08},  // H crop start L
	{0x3802, 0x00},  // V crop start H
	{0x3803, 0x04},  // V crop start L
	{0x3804, 0x10},  // H crop end H
	{0x3805, 0x97},  // H crop end L
	{0x3806, 0x0c},  // V crop end H
	{0x3807, 0x4b},  // V crop end L
	{0x3808, 0x08},  // H output size H
	{0x3809, 0x40},  // H output size L
	{0x380a, 0x06},  // V output size H
	{0x380b, 0x20},  // V output size L
	{0x380c, 0x25},  // HTS H
	{0x380d, 0x80},  // HTS L
	{0x380e, 0x06},  // VTS H
	{0x380f, 0x80},  // VTS L
	{0x3810, 0x00},  // H win off H
	{0x3811, 0x04},  // H win off L
	{0x3812, 0x00},  // V win off H
	{0x3813, 0x02},  // V win off L
	{0x3814, 0x31},  // H inc
	{0x3815, 0x31},  // V inc
#ifdef CONFIG_CAMERA_IMAGE_180
	{0x3820, 0x02},  // V flip on, V bin off
	{0x3821, 0x05},  // H mirror off, H bin on
#else
	{0x3820, 0x06},  // V flip off, V bin off
	{0x3821, 0x01},  // H mirror on, H bin on
#endif
	{0x3834, 0x00},
	{0x3835, 0x1c},  // cut_en, vts_auto, blk_col_dis
	{0x3836, 0x08},
	{0x3837, 0x02},
	{0x4000, 0xf1},  // BLC offset trig en, format change trig en, gain trig en, exp trig en, median en
	{0x4001, 0x00},  // BLC
	{0x400b, 0x0c},  // BLC
	{0x4011, 0x00},  // BLC
	{0x401a, 0x00},  // BLC
	{0x401b, 0x00},  // BLC
	{0x401c, 0x00},  // BLC
	{0x401d, 0x00},  // BLC
	{0x4020, 0x02},  // BLC
	{0x4021, 0x40},  // BLC
	{0x4022, 0x03},  // BLC
	{0x4023, 0x3f},  // BLC
	{0x4024, 0x06},  // BLC
	{0x4025, 0xf8},  // BLC
	{0x4026, 0x07},  // BLC
	{0x4027, 0xf7},  // BLC
	{0x4028, 0x00},  // BLC
	{0x4029, 0x02},  // BLC
	{0x402a, 0x04},  // BLC
	{0x402b, 0x08},  // BLC
	{0x402c, 0x02},  // BLC
	{0x402d, 0x02},  // BLC
	{0x402e, 0x0c},  // BLC
	{0x402f, 0x08},  // BLC
	{0x4500, 0x82},  // BLC
	{0x4501, 0x38},  // BLC
	{0x4603, 0x00},  // VFIFO
	{0x4837, 0x14},  // MIPI global timing
	{0x4d00, 0x04},  // temperature monitor
	{0x4d01, 0x42},  // temperature monitor
	{0x4d02, 0xc1},  // temperature monitor
	{0x4d03, 0x93},  // temperature monitor
	{0x4d04, 0xf5},  // temperature monitor
	{0x4d05, 0xc1},  // temperature monitor
	{0x5000, 0x0f},  // windowing enable, BPC on, WPC on, Lenc on
	{0x5001, 0x03},  // BLC enable, MWB on
	{0x5002, 0x03},
	{0x5013, 0x40},
	{0x501c, 0x00},
	{0x501d, 0x10},
	{0x5400, 0x00},
	{0x5401, 0x81},
	{0x5402, 0x00},
	{0x5403, 0x00},
	{0x5404, 0x01},
	{0x5405, 0x00},
	{0x5b00, 0x00},
	{0x5b01, 0x00},
	{0x5b02, 0x01},
	{0x5b03, 0x9b},
	{0x5b04, 0xa2},
	{0x5b05, 0x6c},
	{0x5e00, 0x00},  // test pattern disable
	{0x5e10, 0x0c},  // ISP test disable
	{0x0100, 0x00},  // software standby
#else
    {0x0103, 0x01}, {0x0100, 0x00}, {0x0300, 0x01}, // for 640Mbps
    {0x0301, 0x00}, {0x0302, 0x28}, {0x0303, 0x00}, {0x030a, 0x00},
    {0x300f, 0x11}, {0x3010, 0x01}, {0x3011, 0x76}, {0x3012, 0x41},
    {0x3013, 0x12}, {0x3014, 0x11}, {0x301f, 0x03}, {0x3106, 0x00},
    {0x3210, 0x47}, {0x3500, 0x00}, {0x3501, 0x60}, {0x3502, 0x00},
    {0x3506, 0x00}, {0x3507, 0x02}, {0x3508, 0x00},
#ifdef use_sensor_gain
    {0x3509, 0x00}, // use sensor gain
#else
    {0x3509, 0x10}, // use real gain
#endif
    {0x350a, 0x00}, {0x350b, 0x80}, {0x350e, 0x00}, {0x350f, 0x10},
    {0x3600, 0x00}, // 0x40
    {0x3601, 0xfc}, {0x3602, 0x02}, {0x3603, 0x48}, {0x3604, 0xa5},
    {0x3605, 0x9f}, {0x3607, 0x00}, {0x360a, 0x40}, {0x360b, 0x91},
    {0x360c, 0x49}, {0x360f, 0x8a}, {0x3611, 0x10}, {0x3612, 0x27},
    {0x3613, 0x33}, {0x3615, 0x08}, {0x3641, 0x02}, {0x3660, 0x82},
    {0x3668, 0x54}, {0x3669, 0x00}, {0x3667, 0xa0}, {0x3702, 0x40},
    {0x3703, 0x44}, {0x3704, 0x2c}, {0x3705, 0x24}, {0x3706, 0x50},
    {0x3707, 0x44}, {0x3708, 0x3c}, {0x3709, 0x1f}, {0x370a, 0x26},
    {0x370b, 0x3c}, {0x3720, 0x66}, {0x3722, 0x84}, {0x3728, 0x40},
    {0x372a, 0x00}, {0x372e, 0x22}, {0x372f, 0xa0}, {0x3730, 0x00},
    {0x3731, 0x00}, {0x3732, 0x00}, {0x3733, 0x00}, {0x3748, 0x00},
    {0x3710, 0x28}, {0x3716, 0x03}, {0x3718, 0x1C}, {0x3719, 0x08},
    {0x371c, 0xfc}, {0x3760, 0x13}, {0x3761, 0x34}, {0x3762, 0x86},
    {0x3763, 0x16}, {0x3767, 0x24}, {0x3768, 0x06}, {0x3769, 0x45},
    {0x376c, 0x23}, {0x3d84, 0x00}, {0x3d85, 0x17}, {0x3d8c, 0x73},
    {0x3d8d, 0xbf}, {0x3800, 0x00}, {0x3801, 0x00}, {0x3802, 0x00},
    {0x3803, 0x04}, {0x3804, 0x10}, {0x3805, 0x9f}, {0x3806, 0x0c},
    {0x3807, 0x4b}, {0x3808, 0x08}, {0x3809, 0x40}, {0x380a, 0x06},
    {0x380b, 0x20}, {0x380c, 0x09}, {0x380d, 0x60}, {0x380e, 0x0d},
    {0x380f, 0x00}, {0x3810, 0x00}, {0x3811, 0x08}, {0x3812, 0x00},
    {0x3813, 0x02}, {0x3814, 0x31}, {0x3815, 0x31}, {0x3820, 0x01},
    {0x3821, 0x06}, {0x3834, 0x00}, {0x3835, 0x1c}, {0x3836, 0x08},
    {0x3837, 0x02}, {0x4000, 0xf1}, {0x4001, 0x00}, {0x400b, 0x0c},
    {0x4011, 0x00}, {0x401a, 0x00}, {0x401b, 0x00}, {0x401c, 0x00},
    {0x401d, 0x00}, {0x4020, 0x00}, {0x4021, 0xe4}, {0x4022, 0x04},
    {0x4023, 0xd7}, {0x4024, 0x05}, {0x4025, 0xbc}, {0x4026, 0x05},
    {0x4027, 0xbf}, {0x4028, 0x00}, {0x4029, 0x02}, {0x402a, 0x04},
    {0x402b, 0x08}, {0x402c, 0x02}, {0x402d, 0x02}, {0x402e, 0x0c},
    {0x402f, 0x08}, {0x403d, 0x2c}, {0x403f, 0x7f}, {0x4500, 0x82},
    {0x4501, 0x3c}, {0x4601, 0x83}, {0x4602, 0x22}, {0x4603, 0x01},
    {0x4837, 0x19}, {0x4d00, 0x04}, {0x4d01, 0x42}, {0x4d02, 0xd1},
    {0x4d03, 0x90}, {0x4d04, 0x66}, {0x4d05, 0x65}, {0x5000, 0x0e},
    {0x5001, 0x01}, {0x5002, 0x07}, {0x5013, 0x40}, {0x501c, 0x00},
    {0x501d, 0x10}, {0x5242, 0x00}, {0x5243, 0xb8}, {0x5244, 0x00},
    {0x5245, 0xf9}, {0x5246, 0x00}, {0x5247, 0xf6}, {0x5248, 0x00},
    {0x5249, 0xa6}, {0x5300, 0xfc}, {0x5301, 0xdf}, {0x5302, 0x3f},
    {0x5303, 0x08}, {0x5304, 0x0c}, {0x5305, 0x10}, {0x5306, 0x20},
    {0x5307, 0x40}, {0x5308, 0x08}, {0x5309, 0x08}, {0x530a, 0x02},
    {0x530b, 0x01}, {0x530c, 0x01}, {0x530d, 0x0c}, {0x530e, 0x02},
    {0x530f, 0x01}, {0x5310, 0x01}, {0x5400, 0x00}, {0x5401, 0x61},
    {0x5402, 0x00}, {0x5403, 0x00}, {0x5404, 0x00}, {0x5405, 0x40},
    {0x540c, 0x05}, {0x5b00, 0x00}, {0x5b01, 0x00}, {0x5b02, 0x01},
    {0x5b03, 0xff}, {0x5b04, 0x02}, {0x5b05, 0x6c}, {0x5b09, 0x02},
    {0x5e00, 0x00}, {0x5e10, 0x1c},
//{0x0100, 0x01},
#endif
};

static const SENSOR_REG_T ov13850_2112x1568_setting[] = {
#if 0
	// Raw 10bit 2112x1568 30fps 4lane 640M bps/lane
	//XVCLK=24Mhz, SCLK=4x120Mhz, MIPI 640Mbps, DACCLK=240Mhz
	{0x0100, 0x00},  // software standby
	{0x0300, 0x01},  // PLL
	{0x0302, 0x28},  // PLL
	{0x3501, 0x67},  // Exposure H
	{0x3801, 0x08},  // H crop start L
	{0x3803, 0x04},  // V crop start L
	{0x3805, 0x97},  // H crop end L
	{0x3807, 0x4b},  // V crop end L
	{0x3808, 0x08},  // H output size H
	{0x3809, 0x40},  // H output size L
	{0x380a, 0x06},  // V output size H
	{0x380b, 0x20},  // V output size L
	{0x380c, 0x25},  // HTS H
	{0x380d, 0x80},  // HTS L
	{0x380e, 0x06},  // VTS H
	{0x380f, 0x80},  // VTS L
	{0x3813, 0x02},  // V win off
	{0x3814, 0x31},  // H inc
	{0x3815, 0x31},  // V inc
#ifdef CONFIG_CAMERA_IMAGE_180
	{0x3820, 0x02},  // V flip on, V bin off
	{0x3821, 0x05},  // H mirror off, H bin on
#else
	{0x3820, 0x06},  // V flip off, V bin off
	{0x3821, 0x01},  // H mirror on, H bin on
#endif
	{0x3836, 0x08},
	{0x3837, 0x02},
	{0x4020, 0x02},
	{0x4021, 0x40},
	{0x4022, 0x03},
	{0x4023, 0x3f},
	{0x4024, 0x06},
	{0x4025, 0xf8},
	{0x4026, 0x07},
	{0x4027, 0xf7},
	{0x4603, 0x00},  // VFIFO
	{0x4837, 0x14},  // MIPI global timing
#else
    {0x0100, 0x00}, // mipi 640Mbps
    {0x0300, 0x01},
    {0x0302, 0x28},
    {0x3612, 0x27},
    {0x370a, 0x26},
    {0x372a, 0x00},
    //{0x3718, 0x1C},
    {0x3800, 0x00},
    {0x3801, 0x00},
    {0x3802, 0x00},
    {0x3803, 0x04},
    {0x3804, 0x10},
    {0x3805, 0x9f},
    {0x3806, 0x0c},
    {0x3807, 0x4b},
    {0x3808, 0x08},
    {0x3809, 0x40},
    {0x380a, 0x06},
    {0x380b, 0x20},
    {0x380c, 0x09},
    {0x380d, 0x60},
    {0x380e, 0x0d},
    {0x380f, 0x00},
    {0x3811, 0x08},
    {0x3813, 0x02},
    {0x3814, 0x31},
    {0x3815, 0x31},
    {0x3820, 0x01},
    {0x3821, 0x06},
    {0x3836, 0x08},
    {0x3837, 0x02},
    {0x4020, 0x00},
    {0x4021, 0xe4},
    {0x4022, 0x04},
    {0x4023, 0xd7},
    {0x4024, 0x05},
    {0x4025, 0xbc},
    {0x4026, 0x05},
    {0x4027, 0xbf},
    {0x4501, 0x3c},
    {0x4601, 0x83},
    {0x4603, 0x01},
    {0x4819, 0x70}, // hs_zero 0x70-115 0xfc-250
    {0x481b, 0xa0}, // hs_trail 0xc0 179  0xf0-250
    {0x4837, 0x19},
    {0x5401, 0x61},
    {0x5405, 0x40},
//  {0x5e00, 0x80},// color bar
//{0x0100, 0x01},// stream on
#endif
};

static const SENSOR_REG_T ov13850_4208x3120_setting[] = {
#if 0
	// Raw 10bit 4208x3120 15fps 4lane 640M bps/lane
	//XVCLK=24Mhz, SCLK=4x120Mhz, MIPI 640Mbps, DACCLK=240Mhz
	{0x0100, 0x00},  // software standby
	{0x0300, 0x01},  // PLL
	{0x0302, 0x28},  // PLL
	{0x3501, 0xcf},  // Exposure H
	{0x3801, 0x14},  // H crop start L
	{0x3803, 0x0c},  // V crop start L
	{0x3805, 0x8b},  // H crop end L
	{0x3807, 0x43},  // V crop end L
	{0x3808, 0x10},  // H output size H
	{0x3809, 0x70},  // H output size L
	{0x380a, 0x0c},  // V output size H
	{0x380b, 0x30},  // V output size L
	{0x380c, 0x25},  // HTS H
	{0x380d, 0x80},  // HTS L
	{0x380e, 0x0d},  // VTS H
	{0x380f, 0x00},  // VTS L
	{0x3813, 0x04},  // V win off
	{0x3814, 0x11},  // H inc
	{0x3815, 0x11},  // V inc
#ifdef CONFIG_CAMERA_IMAGE_180
	{0x3820, 0x00}, //V flip off, V bin off
	{0x3821, 0x04}, //H mirror on, H bin off
#else
	{0x3820, 0x04},  // V flip on, V bin off
	{0x3821, 0x00},  // H mirror off, H bin off
#endif
	{0x3836, 0x04},
	{0x3837, 0x01},
	{0x4020, 0x04},
	{0x4021, 0x90},
	{0x4022, 0x0b},
	{0x4023, 0xef},
	{0x4024, 0x0d},
	{0x4025, 0xc0},
	{0x4026, 0x0d},
	{0x4027, 0xc3},
	{0x4603, 0x01},  // VFIFO
	{0x4837, 0x14},  // MIPI global timing
#else
    {0x0100, 0x00}, // mipi 1200Mbps
    {0x0300, 0x00},
    {0x0302, 0x32},
    {0x3612, 0x07},
    {0x370a, 0x24},
    {0x372a, 0x04},
    //{0x3718, 0x10},
    {0x3800, 0x00},
    {0x3801, 0x14},
    {0x3802, 0x00},
    {0x3803, 0x0c},
    {0x3804, 0x10},
    {0x3805, 0x8b},
    {0x3806, 0x0c},
    {0x3807, 0x43},
    {0x3808, 0x10},
    {0x3809, 0x70},
    {0x380a, 0x0c},
    {0x380b, 0x30},
    {0x380c, 0x12},
    {0x380d, 0xc0},
    {0x380e, 0x0d},
    {0x380f, 0x00},
    {0x3811, 0x04},
    {0x3813, 0x04},
    {0x3814, 0x11},
    {0x3815, 0x11},
    {0x3820, 0x00},
    {0x3821, 0x04},
    {0x3836, 0x04},
    {0x3837, 0x01},
    {0x4020, 0x02},
    {0x4021, 0x3c},
    {0x4022, 0x0e},
    {0x4023, 0x37},
    {0x4024, 0x0f},
    {0x4025, 0x1c},
    {0x4026, 0x0f},
    {0x4027, 0x1f},
    {0x4501, 0x38},
    {0x4601, 0x04},
    {0x4603, 0x00},
    {0x4837, 0x0d},
    {0x5401, 0x71},
    {0x5405, 0x80},
#endif
};

static const SENSOR_REG_T ov13850_1056x594[] = {
    {0x100, 0x0},
    {0x103, 0x1},
    {0x300, 0x1},
    {0x301, 0x0},
    {0x302, 0x27},
    {0x303, 0x02},
    {0x030a, 0x0},
    {0x300f, 0x11}, // 10bit mode
    {0x3010, 0x1},
    {0x3011, 0x76},
    {0x3012, 0x21}, // 2line
    {0x3013, 0x12},
    {0x3014, 0x11},
    {0x301f, 0x3},
    {0x3106, 0x0},
    {0x3210, 0x47},
    {0x3500, 0x0},
    {0x3501, 0x29},
    {0x3502, 0xA0},
    {0x3506, 0x0},
    {0x3507, 0x2},
    {0x3508, 0x0},
    {0x350a, 0x0},
    {0x350b, 0x80},
    {0x350e, 0x0},
    {0x350f, 0x10},
    {0x351a, 0x0},
    {0x351b, 0x10},
    {0x351c, 0x0},
    {0x351d, 0x20},
    {0x351e, 0x0},
    {0x351f, 0x40},
    {0x3520, 0x0},
    {0x3521, 0x80},
    {0x3600, 0xc0},
    {0x3601, 0xfc},
    {0x3602, 0x2},
    {0x3603, 0x78},
    {0x3604, 0xb1},
    {0x3605, 0x95},
    {0x3606, 0x73},
    {0x3607, 0x7},
    {0x3609, 0x40},
    {0x360a, 0x30},
    {0x360b, 0x91},
    {0x360C, 0x9},
    {0x360f, 0x2},
    {0x3611, 0x10},
    {0x3612, 0x7f},
    {0x3613, 0x33},
    {0x3615, 0x0c},
    {0x3616, 0x0e},
    {0x3641, 0x2},
    {0x3660, 0x82},
    {0x3668, 0x54},
    {0x3669, 0x0},
    {0x366a, 0x3f},
    {0x3667, 0xa0},
    {0x3702, 0x5a},
    {0x3703, 0x44},
    {0x3704, 0x2c},
    {0x3705, 0x1},
    {0x3706, 0x15},
    {0x3707, 0x44},
    {0x3708, 0x3c},
    {0x3709, 0x1f},
    {0x370a, 0xa9},
    {0x370b, 0x3c},
    {0x3720, 0x55},
    {0x3722, 0x84},
    {0x3728, 0x40},
    {0x372a, 0x0},
    {0x372b, 0x2},
    {0x372e, 0x22},
    {0x372f, 0x88},
    {0x3730, 0x0},
    {0x3731, 0x0},
    {0x3732, 0x0},
    {0x3733, 0x0},
    {0x3710, 0x28},
    {0x3716, 0x3},
    {0x3718, 0x10},
    {0x3719, 0x0c},
    {0x371a, 0x8},
    {0x371c, 0xfc},
    {0x3748, 0x0},
    {0x3760, 0x13},
    {0x3761, 0x33},
    {0x3762, 0x86},
    {0x3763, 0x16},
    {0x3767, 0x24},
    {0x3768, 0x6},
    {0x3769, 0x45},
    {0x376c, 0x23},
    {0x376f, 0x80},
    {0x3773, 0x6},
    {0x3d84, 0x0},
    {0x3d85, 0x17},
    {0x3d8c, 0x73},
    {0x3d8d, 0xbf},
    {0x3800, 0x0},
    {0x3801, 0x0},
    {0x3802, 0x1},
    {0x3803, 0x78},
    {0x3804, 0x10},
    {0x3805, 0x9f},
    {0x3806, 0x0a},
    {0x3807, 0xcf},
    {0x3808, 0x4},
    {0x3809, 0x20},
    {0x380a, 0x2},
    {0x380b, 0x52},
    {0x380c, 0x12},
    {0x380d, 0xc0},
    {0x380e, 0x0d},
    {0x380f, 0x0},
    {0x3810, 0x0},
    {0x3811, 0x8},
    {0x3812, 0x0},
    {0x3813, 0x2},
    {0x3814, 0x31},
    {0x3815, 0x35},
    {0x3820, 0x2},
    {0x3821, 0x6},
    {0x3823, 0x0},
    {0x3826, 0x0},
    {0x3827, 0x2},
    {0x3834, 0x2},
    {0x3835, 0x1c},
    {0x3836, 0x8},
    {0x3837, 0x4},
    {0x4000, 0xf1},
    {0x4001, 0x0},
    {0x400b, 0x0c},
    {0x4011, 0x0},
    {0x401a, 0x0},
    {0x401b, 0x0},
    {0x401c, 0x0},
    {0x401d, 0x0},
    {0x4020, 0x0},
    {0x4021, 0xe4},
    {0x4022, 0x3},
    {0x4023, 0x3f},
    {0x4024, 0x4},
    {0x4025, 0x20},
    {0x4026, 0x4},
    {0x4027, 0x25},
    {0x4028, 0x0},
    {0x4029, 0x2},
    {0x402a, 0x2},
    {0x402b, 0x4},
    {0x402c, 0x6},
    {0x402d, 0x2},
    {0x402e, 0x8},
    {0x402f, 0x4},
    {0x403d, 0x2c},
    {0x403f, 0x7f},
    {0x4041, 0x7},
    {0x4500, 0x82},
    {0x4501, 0x3c},
    {0x458b, 0x0},
    {0x459c, 0x0},
    {0x459d, 0x0},
    {0x459e, 0x0},
    {0x4601, 0x40},
    {0x4602, 0x22},
    {0x4603, 0x1},
    {0x4837, 0xbc},
    {0x4d00, 0x4},
    {0x4d01, 0x42},
    {0x4d02, 0xd1},
    {0x4d03, 0x90},
    {0x4d04, 0x66},
    {0x4d05, 0x65},
    {0x4d0b, 0x0},
    {0x5000, 0x0e},
    {0x5001, 0x1},
    {0x5002, 0x7},
    {0x5013, 0x40},
    {0x501c, 0x0},
    {0x501d, 0x10},
    {0x510f, 0xfc},
    {0x5110, 0xf0},
    {0x5111, 0x10},
    {0x536d, 0x2},
    {0x536e, 0x67},
    {0x536f, 0x1},
    {0x5370, 0x4c},
    {0x5400, 0x0},
    {0x5400, 0x0},
    {0x5401, 0x51},
    {0x5402, 0x0},
    {0x5403, 0x0},
    {0x5404, 0x0},
    {0x5405, 0x20},
    {0x540c, 0x5},
    {0x5501, 0x0},
    {0x5b00, 0x0},
    {0x5b01, 0x0},
    {0x5b02, 0x1},
    {0x5b03, 0xff},
    {0x5b04, 0x2},
    {0x5b05, 0x6c},
    {0x5b09, 0x2},
    {0x5e00, 0x0},
    {0x5e10, 0x1c},
    //{0x100,0x1}, //stream on

    {0xffff, 0xffff},

};

static SENSOR_STATIC_INFO_T s_ov13850_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {.f_num = 200,
                     .focal_length = 354,
                     .max_fps = 0,
                     .max_adgain = 15 * 2,
                     .ois_supported = 0,
                     .pdaf_supported = 0,

#ifdef CONFIG_CAMERA_PDAF_TYPE
                     .pdaf_supported = CONFIG_CAMERA_PDAF_TYPE,
#else
                     .pdaf_supported = 0,
#endif
                     .exp_valid_frame_num = 1,
                     .clamp_level = 64,
                     .adgain_valid_frame_num = 1,
                     .fov_info = {{4.614f, 3.444f}, 4.222f}}}
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_ov13850_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     {.is_init = 0,
      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
    /*If there are multiple modules,please add here*/
};

static struct sensor_res_tab_info s_ov13850_resolution_tab_raw[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .reg_tab =
         {
             {ADDR_AND_LEN_OF_ARRAY(ov13850_common_init), PNULL, 0, .width = 0,
              .height = 0, .xclk_to_sensor = 24,
              .image_format = SENSOR_IMAGE_FORMAT_RAW},

             {ADDR_AND_LEN_OF_ARRAY(ov13850_1056x594), PNULL, 0, .width = 1056,
              .height = 594, .xclk_to_sensor = 24,
              .image_format = SENSOR_IMAGE_FORMAT_RAW},
             /*
                     {ADDR_AND_LEN_OF_ARRAY(ov13850_2112x1568_setting), PNULL,
                0,
                     .width = 2112, .height = 1568,
                     .xclk_to_sensor = 24, .image_format =
                SENSOR_IMAGE_FORMAT_RAW},
             */
             /*{ADDR_AND_LEN_OF_ARRAY(ov13850_4208x3120_setting), PNULL, 0,
             .width = 4208, .height = 3120,
             .xclk_to_sensor = 24, .image_format = SENSOR_IMAGE_FORMAT_RAW},*/
         }}
    /*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_ov13850_resolution_trim_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .trim_info =
         {
             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
             {.trim_start_x = 0,
              .trim_start_y = 0,
              .trim_width = 1056,
              .trim_height = 594,
              .line_time = 200,
              .bps_per_lane = 312,
              .frame_line = 1664,
              .scaler_trim = {.x = 0, .y = 0, .w = 1056, .h = 594}},
             /*
                    {.trim_start_x = 0, .trim_start_y = 0,
                     .trim_width = 2112,   .trim_height = 1568,
                     .line_time = 200, .bps_per_lane = 640,
                     .frame_line = 1664,
                     .scaler_trim = {.x = 0, .y = 0, .w = 2112, .h = 1568}},
             */
             /*{
             .trim_start_x = 0,.trim_start_y = 0,
             .trim_width = 4208,.trim_height = 3120,
             .line_time = 100,.bps_per_lane = 1200,
             .frame_line = 3328,
             .scaler_trim = {.x = 0, .y = 0, .w = 4208, .h = 3120}},*/
         }}

    /*If there are multiple modules,please add here*/
};

static const SENSOR_REG_T
    s_ov13850_2112x1568_video_tab[SENSOR_VIDEO_MODE_MAX][1] = {
        /*video mode 0: ?fps*/
        {{0xffff, 0xff}},
        /* video mode 1:?fps*/
        {{0xffff, 0xff}},
        /* video mode 2:?fps*/
        {{0xffff, 0xff}},
        /* video mode 3:?fps*/
        {{0xffff, 0xff}}};

static const SENSOR_REG_T
    s_ov13850_4208x3120_video_tab[SENSOR_VIDEO_MODE_MAX][1] = {
        /*video mode 0: ?fps*/
        {{0xffff, 0xff}},
        /* video mode 1:?fps*/
        {{0xffff, 0xff}},
        /* video mode 2:?fps*/
        {{0xffff, 0xff}},
        /* video mode 3:?fps*/
        {{0xffff, 0xff}}};

static SENSOR_VIDEO_INFO_T s_ov13850_video_info[] = {
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    //{{{30, 30, 200, 100}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0,
    // 0}},(SENSOR_REG_T**)s_ov13850_2112x1568_video_tab},
    {{{15, 15, 200, 64}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},
     (SENSOR_REG_T **)s_ov13850_4208x3120_video_tab},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL},
    {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, PNULL}};

static struct sensor_module_info s_ov13850_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {.major_i2c_addr = ov13850_I2C_ADDR_W,
                     .minor_i2c_addr = ov13850_I2C_ADDR_R,

                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
                                            SENSOR_I2C_VAL_8BIT |
                                            SENSOR_I2C_FREQ_400,

                     .avdd_val = SENSOR_AVDD_2800MV,
                     .iovdd_val = SENSOR_AVDD_1800MV,
                     .dvdd_val = SENSOR_AVDD_1200MV,

                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_B,

                     .preview_skip_num = 1,
                     .capture_skip_num = 1,
                     .flash_capture_skip_num = 0,
                     .mipi_cap_skip_num = 0,
                     .preview_deci_num = 0,

                     .sensor_interface =
                         {
                             .type = SENSOR_INTERFACE_TYPE_CSI2,
                             .bus_width = 2,
                             .pixel_width = 10,
                             .is_loose = 0,
                         },

                     .change_setting_skip_num = 3,
                     .horizontal_view_angle = 65,
                     .vertical_view_angle = 60}}
    /*If there are multiple modules,please add here*/
};

struct sensor_raw_info *s_ov13850_mipi_raw_info_ptr = &s_ov13850_mipi_raw_info;
static struct sensor_ic_ops s_ov13850_ops_tab;

SENSOR_INFO_T g_ov13850_mipi_raw_info = {

    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_N | SENSOR_HW_SIGNAL_VSYNC_N |
                          SENSOR_HW_SIGNAL_HSYNC_P,

    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,

    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,

    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 5,

    .power_down_level = SENSOR_LOW_LEVEL_PWDN,

    .identify_count = 1,
    .identify_code = {{0x300A, 0xD8}, {0x300B, 0x50}},

    .source_width_max = 4208,
    .source_height_max = 3120,
    .name = (cmr_s8 *)SENSOR_NAME,

    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .resolution_tab_info_ptr = s_ov13850_resolution_tab_raw,
    .sns_ops = &s_ov13850_ops_tab,
    .raw_info_ptr = &s_ov13850_mipi_raw_info_ptr,
    .ext_info_ptr = NULL,

    .video_tab_info_ptr = s_ov13850_video_info,
    .module_info_tab = s_ov13850_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_ov13850_module_info_tab),

    .sensor_version_info = (cmr_s8 *)"ov13850_V1",
};
#endif
