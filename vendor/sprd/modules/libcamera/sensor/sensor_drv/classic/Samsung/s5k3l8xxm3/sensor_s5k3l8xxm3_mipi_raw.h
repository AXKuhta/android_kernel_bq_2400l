/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * V6.0
 */
/*History
*Date                  Modification                                 Reason
*
*/
#ifndef _S5K3L8XXM3_MIPI_RAW_H_
#define _S5K3L8XXM3_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "cutils/properties.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"

//#define CONFIG_CAMERA_AUTOFOCUS_NOT_SUPPORT

#include "parameters/sensor_s5k3l8xxm3_raw_param_v3.c"

#define CAMERA_IMAGE_180

#define SENSOR_NAME "s5k3l8xxm3_mipi_raw"
#define I2C_SLAVE_ADDR 0x5A /* 8bit slave address*/
#define VENDOR_NUM 1

#define s5k3l8xxm3_PID_ADDR 0x0000
#define s5k3l8xxm3_PID_VALUE 0x30c8
#define s5k3l8xxm3_VER_ADDR 0x0004
#define s5k3l8xxm3_VER_VALUE 0x10ff

/* sensor parameters begin */
/* effective sensor output image size */
#define SNAPSHOT_WIDTH 4208
#define SNAPSHOT_HEIGHT 3120
#define PREVIEW_WIDTH 2104
#define PREVIEW_HEIGHT 1560

/*Raw Trim parameters*/
#define SNAPSHOT_TRIM_X 0
#define SNAPSHOT_TRIM_Y 0
#define SNAPSHOT_TRIM_W 4208
#define SNAPSHOT_TRIM_H 3120
#define PREVIEW_TRIM_X 0
#define PREVIEW_TRIM_Y 0
#define PREVIEW_TRIM_W 2104
#define PREVIEW_TRIM_H 1560

/*Mipi output*/
#define LANE_NUM 4
#define RAW_BITS 10

#define SNAPSHOT_MIPI_PER_LANE_BPS 1124 /* 2*Mipi clk */
#define PREVIEW_MIPI_PER_LANE_BPS 1124  /* 2*Mipi clk */

/*line time unit: 0.001us*/
#define SNAPSHOT_LINE_TIME 10256
#define PREVIEW_LINE_TIME 10256

/* frame length*/
#define SNAPSHOT_FRAME_LENGTH 3234
#define PREVIEW_FRAME_LENGTH 0x0C86 // 3234

/* please ref your spec */
#define FRAME_OFFSET 5
#define SENSOR_MAX_GAIN 0x200
#define SENSOR_BASE_GAIN 0x20
#define SENSOR_MIN_SHUTTER 5

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR 1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
#define SUPPORT_AUTO_FRAME_LENGTH 0

/*delay 1 frame to write sensor gain*/
//#define GAIN_DELAY_1_FRAME

/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN 0x80

/* please don't change it */
#define EX_MCLK 24

/*==============================================================================
 * Description:
 * global variable
 *============================================================================*/
#if 0
static uint32_t s_current_default_frame_length = PREVIEW_FRAME_LENGTH;
static struct sensor_ev_info_t s_sensor_ev_info = {
    PREVIEW_FRAME_LENGTH - FRAME_OFFSET, SENSOR_BASE_GAIN,
    PREVIEW_FRAME_LENGTH};
#endif

//#define FEATURE_OTP    /*OTP function switch*/

#ifdef FEATURE_OTP
#include "parameters/sensor_s5k3l8xxm3_darling_otp.c"
#else
#include "parameters/s5k3l8xxm3_darling_otp.h"
#endif

// S5K3L8X_EVT1.0_ReferenceSetfile_v151030
static const SENSOR_REG_T s5k3l8xxm3_common_init[] = {
    {0x6028, 0x4000}, {0x6214, 0xFFFF}, {0x6216, 0xFFFF}, {0x6218, 0x0000},
    {0x621A, 0x0000},

    {0x6028, 0x2000}, {0x602A, 0x2450}, {0x6F12, 0x0448}, {0x6F12, 0x0349},
    {0x6F12, 0x0160}, {0x6F12, 0xC26A}, {0x6F12, 0x511A}, {0x6F12, 0x8180},
    {0x6F12, 0x00F0}, {0x6F12, 0x48B8}, {0x6F12, 0x2000}, {0x6F12, 0x2588},
    {0x6F12, 0x2000}, {0x6F12, 0x16C0}, {0x6F12, 0x0000}, {0x6F12, 0x0000},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x10B5}, {0x6F12, 0x00F0},
    {0x6F12, 0x5DF8}, {0x6F12, 0x2748}, {0x6F12, 0x4078}, {0x6F12, 0x0028},
    {0x6F12, 0x0AD0}, {0x6F12, 0x00F0}, {0x6F12, 0x5CF8}, {0x6F12, 0x2549},
    {0x6F12, 0xB1F8}, {0x6F12, 0x1403}, {0x6F12, 0x4200}, {0x6F12, 0x2448},
    {0x6F12, 0x4282}, {0x6F12, 0x91F8}, {0x6F12, 0x9610}, {0x6F12, 0x4187},
    {0x6F12, 0x10BD}, {0x6F12, 0x70B5}, {0x6F12, 0x0446}, {0x6F12, 0x2148},
    {0x6F12, 0x0022}, {0x6F12, 0x4068}, {0x6F12, 0x86B2}, {0x6F12, 0x050C},
    {0x6F12, 0x3146}, {0x6F12, 0x2846}, {0x6F12, 0x00F0}, {0x6F12, 0x4CF8},
    {0x6F12, 0x2046}, {0x6F12, 0x00F0}, {0x6F12, 0x4EF8}, {0x6F12, 0x14F8},
    {0x6F12, 0x680F}, {0x6F12, 0x6178}, {0x6F12, 0x40EA}, {0x6F12, 0x4100},
    {0x6F12, 0x1749}, {0x6F12, 0xC886}, {0x6F12, 0x1848}, {0x6F12, 0x2278},
    {0x6F12, 0x007C}, {0x6F12, 0x4240}, {0x6F12, 0x1348}, {0x6F12, 0xA230},
    {0x6F12, 0x8378}, {0x6F12, 0x43EA}, {0x6F12, 0xC202}, {0x6F12, 0x0378},
    {0x6F12, 0x4078}, {0x6F12, 0x9B00}, {0x6F12, 0x43EA}, {0x6F12, 0x4000},
    {0x6F12, 0x0243}, {0x6F12, 0xD0B2}, {0x6F12, 0x0882}, {0x6F12, 0x3146},
    {0x6F12, 0x2846}, {0x6F12, 0xBDE8}, {0x6F12, 0x7040}, {0x6F12, 0x0122},
    {0x6F12, 0x00F0}, {0x6F12, 0x2AB8}, {0x6F12, 0x10B5}, {0x6F12, 0x0022},
    {0x6F12, 0xAFF2}, {0x6F12, 0x8701}, {0x6F12, 0x0B48}, {0x6F12, 0x00F0},
    {0x6F12, 0x2DF8}, {0x6F12, 0x084C}, {0x6F12, 0x0022}, {0x6F12, 0xAFF2},
    {0x6F12, 0x6D01}, {0x6F12, 0x2060}, {0x6F12, 0x0848}, {0x6F12, 0x00F0},
    {0x6F12, 0x25F8}, {0x6F12, 0x6060}, {0x6F12, 0x10BD}, {0x6F12, 0x0000},
    {0x6F12, 0x2000}, {0x6F12, 0x0550}, {0x6F12, 0x2000}, {0x6F12, 0x0C60},
    {0x6F12, 0x4000}, {0x6F12, 0xD000}, {0x6F12, 0x2000}, {0x6F12, 0x2580},
    {0x6F12, 0x2000}, {0x6F12, 0x16F0}, {0x6F12, 0x0000}, {0x6F12, 0x2221},
    {0x6F12, 0x0000}, {0x6F12, 0x2249}, {0x6F12, 0x42F2}, {0x6F12, 0x351C},
    {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047}, {0x6F12, 0x42F2},
    {0x6F12, 0xE11C}, {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047},
    {0x6F12, 0x40F2}, {0x6F12, 0x077C}, {0x6F12, 0xC0F2}, {0x6F12, 0x000C},
    {0x6F12, 0x6047}, {0x6F12, 0x42F2}, {0x6F12, 0x492C}, {0x6F12, 0xC0F2},
    {0x6F12, 0x000C}, {0x6F12, 0x6047}, {0x6F12, 0x4BF2}, {0x6F12, 0x453C},
    {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047}, {0x6F12, 0x0000},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x30C8}, {0x6F12, 0x0157},
    {0x6F12, 0x0000}, {0x6F12, 0x0003},

    {0x6028, 0x2000}, {0x602A, 0x1082}, {0x6F12, 0x8010}, {0x6028, 0x4000},
    {0x31CE, 0x0001}, {0x0200, 0x00C6}, {0x3734, 0x0010}, {0x3736, 0x0001},
    {0x3738, 0x0001}, {0x37CC, 0x0001}, {0x3744, 0x0100}, {0x3762, 0x0105},
    {0x3764, 0x0105}, {0x376A, 0x00F0}, {0x344A, 0x000F}, {0x344C, 0x003D},
    {0xF460, 0x0030}, {0xF414, 0x24C2}, {0xF416, 0x0183}, {0xF468, 0x4005},
    {0x3424, 0x0A07}, {0x3426, 0x0F07}, {0x3428, 0x0F07}, {0x341E, 0x0804},
    {0x3420, 0x0C0C}, {0x3422, 0x2D2D}, {0xF462, 0x003A}, {0x3450, 0x0010},
    {0x3452, 0x0010}, {0xF446, 0x0020}, {0xF44E, 0x000C}, {0x31FA, 0x0007},
    {0x31FC, 0x0161}, {0x31FE, 0x0009}, {0x3200, 0x000C}, {0x3202, 0x007F},
    {0x3204, 0x00A2}, {0x3206, 0x007D}, {0x3208, 0x00A4}, {0x3334, 0x00A7},
    {0x3336, 0x00A5}, {0x3338, 0x0033}, {0x333A, 0x0006}, {0x333C, 0x009F},
    {0x333E, 0x008C}, {0x3340, 0x002D}, {0x3342, 0x000A}, {0x3344, 0x002F},
    {0x3346, 0x0008}, {0x3348, 0x009F}, {0x334A, 0x008C}, {0x334C, 0x002D},
    {0x334E, 0x000A}, {0x3350, 0x000A}, {0x320A, 0x007B}, {0x320C, 0x0161},
    {0x320E, 0x007F}, {0x3210, 0x015F}, {0x3212, 0x007B}, {0x3214, 0x00B0},
    {0x3216, 0x0009}, {0x3218, 0x0038}, {0x321A, 0x0009}, {0x321C, 0x0031},
    {0x321E, 0x0009}, {0x3220, 0x0038}, {0x3222, 0x0009}, {0x3224, 0x007B},
    {0x3226, 0x0001}, {0x3228, 0x0010}, {0x322A, 0x00A2}, {0x322C, 0x00B1},
    {0x322E, 0x0002}, {0x3230, 0x015D}, {0x3232, 0x0001}, {0x3234, 0x015D},
    {0x3236, 0x0001}, {0x3238, 0x000B}, {0x323A, 0x0016}, {0x323C, 0x000D},
    {0x323E, 0x001C}, {0x3240, 0x000D}, {0x3242, 0x0054}, {0x3244, 0x007B},
    {0x3246, 0x00CC}, {0x3248, 0x015D}, {0x324A, 0x007E}, {0x324C, 0x0095},
    {0x324E, 0x0085}, {0x3250, 0x009D}, {0x3252, 0x008D}, {0x3254, 0x009D},
    {0x3256, 0x007E}, {0x3258, 0x0080}, {0x325A, 0x0001}, {0x325C, 0x0005},
    {0x325E, 0x0085}, {0x3260, 0x009D}, {0x3262, 0x0001}, {0x3264, 0x0005},
    {0x3266, 0x007E}, {0x3268, 0x0080}, {0x326A, 0x0053}, {0x326C, 0x007D},
    {0x326E, 0x00CB}, {0x3270, 0x015E}, {0x3272, 0x0001}, {0x3274, 0x0005},
    {0x3276, 0x0009}, {0x3278, 0x000C}, {0x327A, 0x007E}, {0x327C, 0x0098},
    {0x327E, 0x0009}, {0x3280, 0x000C}, {0x3282, 0x007E}, {0x3284, 0x0080},
    {0x3286, 0x0044}, {0x3288, 0x0163}, {0x328A, 0x0045}, {0x328C, 0x0047},
    {0x328E, 0x007D}, {0x3290, 0x0080}, {0x3292, 0x015F}, {0x3294, 0x0162},
    {0x3296, 0x007D}, {0x3298, 0x0000}, {0x329A, 0x0000}, {0x329C, 0x0000},
    {0x329E, 0x0000}, {0x32A0, 0x0008}, {0x32A2, 0x0010}, {0x32A4, 0x0018},
    {0x32A6, 0x0020}, {0x32A8, 0x0000}, {0x32AA, 0x0008}, {0x32AC, 0x0010},
    {0x32AE, 0x0018}, {0x32B0, 0x0020}, {0x32B2, 0x0020}, {0x32B4, 0x0020},
    {0x32B6, 0x0020}, {0x32B8, 0x0000}, {0x32BA, 0x0000}, {0x32BC, 0x0000},
    {0x32BE, 0x0000}, {0x32C0, 0x0000}, {0x32C2, 0x0000}, {0x32C4, 0x0000},
    {0x32C6, 0x0000}, {0x32C8, 0x0000}, {0x32CA, 0x0000}, {0x32CC, 0x0000},
    {0x32CE, 0x0000}, {0x32D0, 0x0000}, {0x32D2, 0x0000}, {0x32D4, 0x0000},
    {0x32D6, 0x0000}, {0x32D8, 0x0000}, {0x32DA, 0x0000}, {0x32DC, 0x0000},
    {0x32DE, 0x0000}, {0x32E0, 0x0000}, {0x32E2, 0x0000}, {0x32E4, 0x0000},
    {0x32E6, 0x0000}, {0x32E8, 0x0000}, {0x32EA, 0x0000}, {0x32EC, 0x0000},
    {0x32EE, 0x0000}, {0x32F0, 0x0000}, {0x32F2, 0x0000}, {0x32F4, 0x000A},
    {0x32F6, 0x0002}, {0x32F8, 0x0008}, {0x32FA, 0x0010}, {0x32FC, 0x0020},
    {0x32FE, 0x0028}, {0x3300, 0x0038}, {0x3302, 0x0040}, {0x3304, 0x0050},
    {0x3306, 0x0058}, {0x3308, 0x0068}, {0x330A, 0x0070}, {0x330C, 0x0080},
    {0x330E, 0x0088}, {0x3310, 0x0098}, {0x3312, 0x00A0}, {0x3314, 0x00B0},
    {0x3316, 0x00B8}, {0x3318, 0x00C8}, {0x331A, 0x00D0}, {0x331C, 0x00E0},
    {0x331E, 0x00E8}, {0x3320, 0x0017}, {0x3322, 0x002F}, {0x3324, 0x0047},
    {0x3326, 0x005F}, {0x3328, 0x0077}, {0x332A, 0x008F}, {0x332C, 0x00A7},
    {0x332E, 0x00BF}, {0x3330, 0x00D7}, {0x3332, 0x00EF}, {0x3352, 0x00A5},
    {0x3354, 0x00AF}, {0x3356, 0x0187}, {0x3358, 0x0000}, {0x335A, 0x009E},
    {0x335C, 0x016B}, {0x335E, 0x0015}, {0x3360, 0x00A5}, {0x3362, 0x00AF},
    {0x3364, 0x01FB}, {0x3366, 0x0000}, {0x3368, 0x009E}, {0x336A, 0x016B},
    {0x336C, 0x0015}, {0x336E, 0x00A5}, {0x3370, 0x00A6}, {0x3372, 0x0187},
    {0x3374, 0x0000}, {0x3376, 0x009E}, {0x3378, 0x016B}, {0x337A, 0x0015},
    {0x337C, 0x00A5}, {0x337E, 0x00A6}, {0x3380, 0x01FB}, {0x3382, 0x0000},
    {0x3384, 0x009E}, {0x3386, 0x016B}, {0x3388, 0x0015}, {0x319A, 0x0005},
    {0x1006, 0x0005}, {0x3416, 0x0001}, {0x308C, 0x0008}, {0x307C, 0x0240},
    {0x375E, 0x0050}, {0x31CE, 0x0101}, {0x374E, 0x0007}, {0x3460, 0x0001},
    {0x3052, 0x0002}, {0x3058, 0x0100}, {0x6028, 0x2000}, {0x602A, 0x108A},
    {0x6F12, 0x0359}, {0x6F12, 0x0100}, {0x6028, 0x4000}, {0x1124, 0x4100},
    {0x1126, 0x0000}, {0x112C, 0x4100}, {0x112E, 0x0000}, {0x3442, 0x0100},
    {0x3098, 0x0364}, //
};

// 4208x3120 30FPS v566.4M mipi1124M 4lane
// frame length	0x0CA2
// 1H time	102.5
static const SENSOR_REG_T s5k3l8_4208x3120_4lane_setting[] = {
    {0x6028, 0x2000}, {0x602A, 0x0F74}, {0x6F12, 0x0040}, {0x6F12, 0x0040},
    {0x6028, 0x4000}, {0x0344, 0x0008}, {0x0346, 0x0008}, {0x0348, 0x1077},
    {0x034A, 0x0C37}, {0x034C, 0x1070}, {0x034E, 0x0C30}, {0x0900, 0x0011},
    {0x0380, 0x0001}, {0x0382, 0x0001}, {0x0384, 0x0001}, {0x0386, 0x0001},
    {0x0400, 0x0000}, {0x0404, 0x0010}, {0x0114, 0x0300}, {0x0110, 0x0002},
    {0x0136, 0x1800}, {0x0304, 0x0006}, {0x0306, 0x00B1}, {0x0302, 0x0001},
    {0x0300, 0x0005}, {0x030C, 0x0006}, {0x030E, 0x0119}, {0x030A, 0x0001},
    {0x0308, 0x0008}, {0x0342, 0x16B0}, {0x0340, 0x0CA2}, {0x0202, 0x0200},
    {0x0200, 0x00C6}, {0x0B04, 0x0101}, {0x0B08, 0x0000}, {0x0B00, 0x0007},
    {0x316A, 0x00A0},

    //{ 0x0100, 0x0100 },	//streaming on
};

// 2104x1560 30FPS v566.4M mipi1124M 4lane
// frame length	0x0C86
// 1H time	102.5
static const SENSOR_REG_T s5k3l8_2104x1560_4lane_setting[] = {
    {0x6028, 0x2000}, {0x602A, 0x0F74}, {0x6F12, 0x0040}, {0x6F12, 0x0040},
    {0x6028, 0x4000}, {0x0344, 0x0008}, {0x0346, 0x0008}, {0x0348, 0x1077},
    {0x034A, 0x0C37}, {0x034C, 0x0838}, {0x034E, 0x0618}, {0x0900, 0x0112},
    {0x0380, 0x0001}, {0x0382, 0x0001}, {0x0384, 0x0001}, {0x0386, 0x0003},
    {0x0400, 0x0001}, {0x0404, 0x0020}, {0x0114, 0x0300}, {0x0110, 0x0002},
    {0x0136, 0x1800}, {0x0304, 0x0006}, {0x0306, 0x00B1}, {0x0302, 0x0001},
    {0x0300, 0x0005}, {0x030C, 0x0006}, {0x030E, 0x0119}, {0x030A, 0x0001},
    {0x0308, 0x0008}, {0x0342, 0x16B0}, {0x0340, 0x0C86}, {0x0202, 0x0200},
    {0x0200, 0x00C6}, {0x0B04, 0x0101}, {0x0B08, 0x0000}, {0x0B00, 0x0007},
    {0x316A, 0x00A0},

    //{ 0x0100, 0x0100 },	//streaming on
};

static const SENSOR_REG_T s5k3l8xxm3_init_setting[] = {
    {0x6028, 0x4000}, {0x6214, 0xFFFF}, {0x6216, 0xFFFF}, {0x6218, 0x0000},
    {0x621A, 0x0000}, {0x6028, 0x2000}, {0x602A, 0x2450}, {0x6F12, 0x0448},
    {0x6F12, 0x0349}, {0x6F12, 0x0160}, {0x6F12, 0xC26A}, {0x6F12, 0x511A},
    {0x6F12, 0x8180}, {0x6F12, 0x00F0}, {0x6F12, 0x48B8}, {0x6F12, 0x2000},
    {0x6F12, 0x2588}, {0x6F12, 0x2000}, {0x6F12, 0x16C0}, {0x6F12, 0x0000},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x10B5},
    {0x6F12, 0x00F0}, {0x6F12, 0x5DF8}, {0x6F12, 0x2748}, {0x6F12, 0x4078},
    {0x6F12, 0x0028}, {0x6F12, 0x0AD0}, {0x6F12, 0x00F0}, {0x6F12, 0x5CF8},
    {0x6F12, 0x2549}, {0x6F12, 0xB1F8}, {0x6F12, 0x1403}, {0x6F12, 0x4200},
    {0x6F12, 0x2448}, {0x6F12, 0x4282}, {0x6F12, 0x91F8}, {0x6F12, 0x9610},
    {0x6F12, 0x4187}, {0x6F12, 0x10BD}, {0x6F12, 0x70B5}, {0x6F12, 0x0446},
    {0x6F12, 0x2148}, {0x6F12, 0x0022}, {0x6F12, 0x4068}, {0x6F12, 0x86B2},
    {0x6F12, 0x050C}, {0x6F12, 0x3146}, {0x6F12, 0x2846}, {0x6F12, 0x00F0},
    {0x6F12, 0x4CF8}, {0x6F12, 0x2046}, {0x6F12, 0x00F0}, {0x6F12, 0x4EF8},
    {0x6F12, 0x14F8}, {0x6F12, 0x680F}, {0x6F12, 0x6178}, {0x6F12, 0x40EA},
    {0x6F12, 0x4100}, {0x6F12, 0x1749}, {0x6F12, 0xC886}, {0x6F12, 0x1848},
    {0x6F12, 0x2278}, {0x6F12, 0x007C}, {0x6F12, 0x4240}, {0x6F12, 0x1348},
    {0x6F12, 0xA230}, {0x6F12, 0x8378}, {0x6F12, 0x43EA}, {0x6F12, 0xC202},
    {0x6F12, 0x0378}, {0x6F12, 0x4078}, {0x6F12, 0x9B00}, {0x6F12, 0x43EA},
    {0x6F12, 0x4000}, {0x6F12, 0x0243}, {0x6F12, 0xD0B2}, {0x6F12, 0x0882},
    {0x6F12, 0x3146}, {0x6F12, 0x2846}, {0x6F12, 0xBDE8}, {0x6F12, 0x7040},
    {0x6F12, 0x0122}, {0x6F12, 0x00F0}, {0x6F12, 0x2AB8}, {0x6F12, 0x10B5},
    {0x6F12, 0x0022}, {0x6F12, 0xAFF2}, {0x6F12, 0x8701}, {0x6F12, 0x0B48},
    {0x6F12, 0x00F0}, {0x6F12, 0x2DF8}, {0x6F12, 0x084C}, {0x6F12, 0x0022},
    {0x6F12, 0xAFF2}, {0x6F12, 0x6D01}, {0x6F12, 0x2060}, {0x6F12, 0x0848},
    {0x6F12, 0x00F0}, {0x6F12, 0x25F8}, {0x6F12, 0x6060}, {0x6F12, 0x10BD},
    {0x6F12, 0x0000}, {0x6F12, 0x2000}, {0x6F12, 0x0550}, {0x6F12, 0x2000},
    {0x6F12, 0x0C60}, {0x6F12, 0x4000}, {0x6F12, 0xD000}, {0x6F12, 0x2000},
    {0x6F12, 0x2580}, {0x6F12, 0x2000}, {0x6F12, 0x16F0}, {0x6F12, 0x0000},
    {0x6F12, 0x2221}, {0x6F12, 0x0000}, {0x6F12, 0x2249}, {0x6F12, 0x42F2},
    {0x6F12, 0x351C}, {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047},
    {0x6F12, 0x42F2}, {0x6F12, 0xE11C}, {0x6F12, 0xC0F2}, {0x6F12, 0x000C},
    {0x6F12, 0x6047}, {0x6F12, 0x40F2}, {0x6F12, 0x077C}, {0x6F12, 0xC0F2},
    {0x6F12, 0x000C}, {0x6F12, 0x6047}, {0x6F12, 0x42F2}, {0x6F12, 0x492C},
    {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047}, {0x6F12, 0x4BF2},
    {0x6F12, 0x453C}, {0x6F12, 0xC0F2}, {0x6F12, 0x000C}, {0x6F12, 0x6047},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000},
    {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x0000}, {0x6F12, 0x30C8},
    {0x6F12, 0x0157}, {0x6F12, 0x0000}, {0x6F12, 0x0003}, {0x3052, 0x0000}, //
    {0x3098, 0x0364},                                                       //

    {0x6028, 0x2000}, {0x602a, 0x1082}, {0x6f12, 0x8010}, {0x6028, 0x4000},
    {0x31ce, 0x0001}, {0x0200, 0x00c6}, {0x3734, 0x0010}, {0x3736, 0x0001},
    {0x3738, 0x0001}, {0x37cc, 0x0000}, {0x3744, 0x0100}, {0x3762, 0x0105},
    {0x3764, 0x0105}, {0x376a, 0x00f0}, {0x344a, 0x000f}, {0x344c, 0x003d},
    {0xf460, 0x0034}, {0xf414, 0x24c2}, {0xf416, 0x0183}, {0xf468, 0x0005},
    {0x3424, 0x0807}, {0x3426, 0x0f07}, {0x3428, 0x0f07}, {0x341e, 0x0804},
    {0x3420, 0x0c0c}, {0x3422, 0x2d2d}, {0xf462, 0x003a}, {0x3450, 0x0010},
    {0x3452, 0x0010}, {0xf446, 0x0020}, {0xf44e, 0x000c}, {0x31fa, 0x0007},
    {0x31fc, 0x0161}, {0x31fe, 0x0009}, {0x3200, 0x000c}, {0x3202, 0x007f},
    {0x3204, 0x00a2}, {0x3206, 0x007d}, {0x3208, 0x00a4}, {0x3334, 0x00a7},
    {0x3336, 0x00a5}, {0x3338, 0x0033}, {0x333a, 0x0006}, {0x333c, 0x009f},
    {0x333e, 0x008c}, {0x3340, 0x002d}, {0x3342, 0x000a}, {0x3344, 0x002f},
    {0x3346, 0x0008}, {0x3348, 0x009f}, {0x334a, 0x008c}, {0x334c, 0x002d},
    {0x334e, 0x000a}, {0x3350, 0x000a}, {0x320a, 0x007b}, {0x320c, 0x0161},
    {0x320e, 0x007f}, {0x3210, 0x015f}, {0x3212, 0x007b}, {0x3214, 0x00b0},
    {0x3216, 0x0009}, {0x3218, 0x0038}, {0x321a, 0x0009}, {0x321c, 0x0031},
    {0x321e, 0x0009}, {0x3220, 0x0038}, {0x3222, 0x0009}, {0x3224, 0x007b},
    {0x3226, 0x0001}, {0x3228, 0x0010}, {0x322a, 0x00a2}, {0x322c, 0x00b1},
    {0x322e, 0x0002}, {0x3230, 0x015d}, {0x3232, 0x0001}, {0x3234, 0x015d},
    {0x3236, 0x0001}, {0x3238, 0x000b}, {0x323a, 0x0016}, {0x323c, 0x000d},
    {0x323e, 0x001c}, {0x3240, 0x000d}, {0x3242, 0x0054}, {0x3244, 0x007b},
    {0x3246, 0x00cc}, {0x3248, 0x015d}, {0x324a, 0x007e}, {0x324c, 0x0095},
    {0x324e, 0x0085}, {0x3250, 0x009d}, {0x3252, 0x008d}, {0x3254, 0x009d},
    {0x3256, 0x007e}, {0x3258, 0x0080}, {0x325a, 0x0001}, {0x325c, 0x0005},
    {0x325e, 0x0085}, {0x3260, 0x009d}, {0x3262, 0x0001}, {0x3264, 0x0005},
    {0x3266, 0x007e}, {0x3268, 0x0080}, {0x326a, 0x0053}, {0x326c, 0x007d},
    {0x326e, 0x00cb}, {0x3270, 0x015e}, {0x3272, 0x0001}, {0x3274, 0x0005},
    {0x3276, 0x0009}, {0x3278, 0x000c}, {0x327a, 0x007e}, {0x327c, 0x0098},
    {0x327e, 0x0009}, {0x3280, 0x000c}, {0x3282, 0x007e}, {0x3284, 0x0080},
    {0x3286, 0x0044}, {0x3288, 0x0163}, {0x328a, 0x0045}, {0x328c, 0x0047},
    {0x328e, 0x007d}, {0x3290, 0x0080}, {0x3292, 0x015f}, {0x3294, 0x0162},
    {0x3296, 0x007d}, {0x3298, 0x0000}, {0x329a, 0x0000}, {0x329c, 0x0000},
    {0x329e, 0x0000}, {0x32a0, 0x0008}, {0x32a2, 0x0010}, {0x32a4, 0x0018},
    {0x32a6, 0x0020}, {0x32a8, 0x0000}, {0x32aa, 0x0008}, {0x32ac, 0x0010},
    {0x32ae, 0x0018}, {0x32b0, 0x0020}, {0x32b2, 0x0020}, {0x32b4, 0x0020},
    {0x32b6, 0x0020}, {0x32b8, 0x0000}, {0x32ba, 0x0000}, {0x32bc, 0x0000},
    {0x32be, 0x0000}, {0x32c0, 0x0000}, {0x32c2, 0x0000}, {0x32c4, 0x0000},
    {0x32c6, 0x0000}, {0x32c8, 0x0000}, {0x32ca, 0x0000}, {0x32cc, 0x0000},
    {0x32ce, 0x0000}, {0x32d0, 0x0000}, {0x32d2, 0x0000}, {0x32d4, 0x0000},
    {0x32d6, 0x0000}, {0x32d8, 0x0000}, {0x32da, 0x0000}, {0x32dc, 0x0000},
    {0x32de, 0x0000}, {0x32e0, 0x0000}, {0x32e2, 0x0000}, {0x32e4, 0x0000},
    {0x32e6, 0x0000}, {0x32e8, 0x0000}, {0x32ea, 0x0000}, {0x32ec, 0x0000},
    {0x32ee, 0x0000}, {0x32f0, 0x0000}, {0x32f2, 0x0000}, {0x32f4, 0x000a},
    {0x32f6, 0x0002}, {0x32f8, 0x0008}, {0x32fa, 0x0010}, {0x32fc, 0x0020},
    {0x32fe, 0x0028}, {0x3300, 0x0038}, {0x3302, 0x0040}, {0x3304, 0x0050},
    {0x3306, 0x0058}, {0x3308, 0x0068}, {0x330a, 0x0070}, {0x330c, 0x0080},
    {0x330e, 0x0088}, {0x3310, 0x0098}, {0x3312, 0x00a0}, {0x3314, 0x00b0},
    {0x3316, 0x00b8}, {0x3318, 0x00c8}, {0x331a, 0x00d0}, {0x331c, 0x00e0},
    {0x331e, 0x00e8}, {0x3320, 0x0017}, {0x3322, 0x002f}, {0x3324, 0x0047},
    {0x3326, 0x005f}, {0x3328, 0x0077}, {0x332a, 0x008f}, {0x332c, 0x00a7},
    {0x332e, 0x00bf}, {0x3330, 0x00d7}, {0x3332, 0x00ef}, {0x3352, 0x00a5},
    {0x3354, 0x00af}, {0x3356, 0x0187}, {0x3358, 0x0000}, {0x335a, 0x009e},
    {0x335c, 0x016b}, {0x335e, 0x0015}, {0x3360, 0x00a5}, {0x3362, 0x00af},
    {0x3364, 0x01fb}, {0x3366, 0x0000}, {0x3368, 0x009e}, {0x336a, 0x016b},
    {0x336c, 0x0015}, {0x336e, 0x00a5}, {0x3370, 0x00a6}, {0x3372, 0x0187},
    {0x3374, 0x0000}, {0x3376, 0x009e}, {0x3378, 0x016b}, {0x337a, 0x0015},
    {0x337c, 0x00a5}, {0x337e, 0x00a6}, {0x3380, 0x01fb}, {0x3382, 0x0000},
    {0x3384, 0x009e}, {0x3386, 0x016b}, {0x3388, 0x0015}, {0x319a, 0x0005},
    {0x1006, 0x0005}, {0x3416, 0x0001}, {0x308c, 0x0008}, {0x307c, 0x0240},
    {0x375e, 0x0050}, {0x316a, 0x00a0}, {0x31ce, 0x0101}, {0x374e, 0x0007},
    {0x3460, 0x0001}, {0x6028, 0x2000}, {0x602a, 0x108a}, {0x6f12, 0x0359},
    {0x6f12, 0x0100},
};
static const SENSOR_REG_T s5k3l8xxm3_720p_setting[] = {
    // 720p setting @120fps, 24Mclk,p566.4M,1124M/lane,4lanes
    {0x6028, 0x2000}, {0x602A, 0x0F74}, {0x6F12, 0x0040}, {0x6F12, 0x0040},
    {0x6028, 0x4000}, {0x0344, 0x00C0}, {0x0346, 0x01E8}, {0x0348, 0x0FBF},
    {0x034A, 0x0A57}, {0x034C, 0x0500}, {0x034E, 0x02D0}, {0x0900, 0x0113},
    {0x0380, 0x0001}, {0x0382, 0x0001}, {0x0384, 0x0001}, {0x0386, 0x0005},
    {0x0400, 0x0001}, {0x0404, 0x0030}, {0x0114, 0x0300}, {0x0110, 0x0002},
    {0x0136, 0x1800}, {0x0304, 0x0006}, {0x0306, 0x00B1}, {0x0302, 0x0001},
    {0x0300, 0x0005}, {0x030C, 0x0006}, {0x030E, 0x0119}, {0x030A, 0x0001},
    {0x0308, 0x0008}, {0x0342, 0x16B0}, {0x0340, 0x032C}, {0x0202, 0x0200},
    {0x0200, 0x00C6}, {0x0B04, 0x0101}, {0x0B08, 0x0000}, {0x0B00, 0x0007},
    {0x316A, 0x00A0},

};

static const SENSOR_REG_T s5k3l8xxm3_preview_setting[] = {
    //$MIPI[Width:2104,Height:1560,Format:Raw10,Lane:4,ErrorCheck:0,PolarityData:0,PolarityClock:0,Buffer:4,DataRate:1124,useEmbData:0]
    ////$MV1[MCLK:24,Width:2104,Height:1560,Format:MIPI_Raw10,mipi_lane:4,mipi_datarate:1124,pvi_pclk_inverse:0]
    /*
    ExtClk :		24	MHz
    Vt_pix_clk :		566.4	MHz
    MIPI_output_speed :	1124	Mbps/lane
    Crop_Width :		4208	px
    Crop_Height :		3120	px
    Output_Width :		2104	px
    Output_Height : 	1560	px
    Frame rate :		30.01	fps
    Output format : 	Raw10
    *Pedestal :		64
    *Mapped BPC :		On
    *Dynamic BPC :		Off
    *Internal LSC : 	Off
    H-size :		5808	px
    H-blank :		3704	px
    V-size :		3250	line
    V-blank :		1690	line
    Lane :			4	lane
    First Pixel :		Gr	First	  */
    {0x6028, 0x2000}, {0x602A, 0x0F74}, {0x6F12, 0x0040}, {0x6F12, 0x0040},
    {0x6028, 0x4000}, {0x0344, 0x0008}, {0x0346, 0x0008}, {0x0348, 0x1077},
    {0x034A, 0x0C37}, {0x034C, 0x0838}, {0x034E, 0x0618}, {0x0900, 0x0112},
    {0x0380, 0x0001}, {0x0382, 0x0001}, {0x0384, 0x0001}, {0x0386, 0x0003},
    {0x0400, 0x0001}, {0x0404, 0x0020}, {0x0114, 0x0300}, {0x0110, 0x0002},
    {0x0136, 0x1800}, {0x0304, 0x0006}, {0x0306, 0x00B1}, {0x0302, 0x0001},
    {0x0300, 0x0005}, {0x030C, 0x0006}, {0x030E, 0x0119}, {0x030A, 0x0001},
    {0x0308, 0x0008}, {0x0342, 0x16B0}, {0x0340, 0x0CB2}, {0x0202, 0x0200},
    {0x0200, 0x00C6}, {0x0B04, 0x0101}, {0x0B08, 0x0000}, {0x0B00, 0x0007},
    {0x316A, 0x00A0},
};

static const SENSOR_REG_T s5k3l8xxm3_snapshot_setting[] = {
    // 3L8 ID : 03C8 read address 0000
    // 4208x3120_Mclk=24Mhz_4lane_30fps
    // Vt=566.4Mhz
    // MIPI speed 1124Mbps
    // line time :102
    // frame length :3250
    // Bayer pattern : GRBG

    {0x6028, 0x2000},
    {0x602A, 0x0F74},
    {0x6F12, 0x0040},
    {0x6F12, 0x0040},
    {0x6028, 0x4000},
    /*{0x0344,0x0020},//4160 x3120
    {0x0346,0x0008},
    {0x0348,0x105F},
    {0x034A,0x0C37},
    {0x034C,0x1040},
    {0x034E,0x0C30},*/
    {0x0344, 0x0008}, // 4208 x3120
    {0x0346, 0x0008},
    {0x0348, 0x1077},
    {0x034A, 0x0C37},
    {0x034C, 0x1070},
    {0x034E, 0x0C30},
    {0x0900, 0x0011},
    {0x0380, 0x0001},
    {0x0382, 0x0001},
    {0x0384, 0x0001},
    {0x0386, 0x0001},
    {0x0400, 0x0000},
    {0x0404, 0x0010},
    {0x0114, 0x0300},
    {0x0110, 0x0002},
    {0x0136, 0x1800},
    {0x0304, 0x0006},
    {0x0306, 0x00B1},
    {0x0302, 0x0001},
    {0x0300, 0x0005},
    {0x030C, 0x0006},
    {0x030E, 0x0119},
    {0x030A, 0x0001},
    {0x0308, 0x0008},
    {0x0342, 0x16B0},
    {0x0340, 0x0CB2}, //
    {0x0202, 0x0200},
    {0x0200, 0x00C6},
    {0x0B04, 0x0101},
    {0x0B08, 0x0000}, //
    {0x0B00, 0x0007},
    {0x316A, 0x00A0},
};

static struct sensor_res_tab_info s_s5k3l8xxm3_resolution_tab_raw[VENDOR_NUM] = {
    {
      .module_id = MODULE_SUNNY,
      .reg_tab = {
        {ADDR_AND_LEN_OF_ARRAY(s5k3l8xxm3_common_init), PNULL, 0,
        .width = 0, .height = 0,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

        {ADDR_AND_LEN_OF_ARRAY(s5k3l8xxm3_720p_setting), PNULL, 0,
        .width = 1280, .height = 720,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

        {ADDR_AND_LEN_OF_ARRAY(s5k3l8_2104x1560_4lane_setting), PNULL, 0,
        .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

        {ADDR_AND_LEN_OF_ARRAY(s5k3l8_4208x3120_4lane_setting), PNULL, 0,
        .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW}}
    }
/*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_s5k3l8xxm3_resolution_trim_tab[VENDOR_NUM] = {
    {
     .module_id = MODULE_SUNNY,
     .trim_info = {
       {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
       {.trim_start_x = 0,.trim_start_y = 0, .trim_width = 1280,.trim_height = 720,
        .line_time = 10263,.bps_per_lane = 1124, .frame_line = 812,
        .scaler_trim = {.x = 0, .y = 0, .w = 1280, .h = 720}},

       {.trim_start_x = PREVIEW_TRIM_X,.trim_start_y = PREVIEW_TRIM_Y,
        .trim_width = PREVIEW_TRIM_W,.trim_height = PREVIEW_TRIM_H,
        .line_time = PREVIEW_LINE_TIME,.bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
        .frame_line = PREVIEW_FRAME_LENGTH,
        .scaler_trim = {.x = 0, .y = 0, .w = PREVIEW_TRIM_W, .h = PREVIEW_TRIM_H}},

       {.trim_start_x = SNAPSHOT_TRIM_X,.trim_start_y = SNAPSHOT_TRIM_Y,
        .trim_width = SNAPSHOT_TRIM_W,.trim_height = SNAPSHOT_TRIM_H,
        .line_time = SNAPSHOT_LINE_TIME,.bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
        .frame_line = SNAPSHOT_FRAME_LENGTH,
        .scaler_trim = {.x = 0, .y = 0, .w = SNAPSHOT_TRIM_W, .h = SNAPSHOT_TRIM_H}}}
    }
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_s5k3l8xxm3_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
       {.is_init = 0,
         {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
         {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
         {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}
    }
    /*If there are multiple modules,please add here*/
};

static SENSOR_STATIC_INFO_T s_s5k3l8xxm3_static_info[VENDOR_NUM] = {
    {
     .module_id = MODULE_SUNNY,
     .static_info = {
         .f_num = 220,
         .focal_length = 346,
         .max_fps = 0,
         .max_adgain = 16 * 256,
         .ois_supported = 0,
         .pdaf_supported = SENSOR_PDAF_TYPE3_ENABLE,
         .exp_valid_frame_num = 1,
         .clamp_level = 64,
         .adgain_valid_frame_num = 1,
         .fov_info = {{4.614f, 3.444f}, 4.222f}}
    }
    /*If there are multiple modules,please add here*/
};

static struct sensor_module_info s_s5k3l8xxm3_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {
         .major_i2c_addr = I2C_SLAVE_ADDR >> 1,
         .minor_i2c_addr = I2C_SLAVE_ADDR >> 1,

         .reg_addr_value_bits = SENSOR_I2C_REG_16BIT | SENSOR_I2C_VAL_16BIT |
                                SENSOR_I2C_FREQ_400,

         .avdd_val = SENSOR_AVDD_2800MV,
         .iovdd_val = SENSOR_AVDD_1800MV,
         .dvdd_val = SENSOR_AVDD_1200MV,

         .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_GR,

         .preview_skip_num = 1,
         .capture_skip_num = 1,
         .flash_capture_skip_num = 6,
         .mipi_cap_skip_num = 0,
         .preview_deci_num = 0,
         .video_preview_deci_num = 0,

         .sensor_interface = {
            .type = SENSOR_INTERFACE_TYPE_CSI2,
            .bus_width = LANE_NUM,   /*lane number or bit-width*/
            .pixel_width = RAW_BITS, /*bits per pixel*/
            .is_loose = 0,    /*0 packet, 1 half word per pixel*/
          },

         .change_setting_skip_num = 1,
         .horizontal_view_angle = 65,
         .vertical_view_angle = 60
      }
    }
};


static struct sensor_ic_ops s_s5k3l8xxm3_ops_tab;
static struct sensor_raw_info *s_s5k3l8xxm3_mipi_raw_info_ptr =
    &s_s5k3l8xxm3_mipi_raw_info;

/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_s5k3l8xxm3_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL | SENSOR_IMAGE_EFFECT_BLACKWHITE |
                    SENSOR_IMAGE_EFFECT_RED | SENSOR_IMAGE_EFFECT_GREEN |
                    SENSOR_IMAGE_EFFECT_BLUE | SENSOR_IMAGE_EFFECT_YELLOW |
                    SENSOR_IMAGE_EFFECT_NEGATIVE | SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,

    .identify_code = {{s5k3l8xxm3_PID_ADDR, s5k3l8xxm3_PID_VALUE},
                      {s5k3l8xxm3_VER_ADDR, s5k3l8xxm3_VER_VALUE}},

     .source_width_max = SNAPSHOT_WIDTH,
     .source_height_max = SNAPSHOT_HEIGHT,
     .name = (cmr_s8 *) SENSOR_NAME,

    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .resolution_tab_info_ptr = s_s5k3l8xxm3_resolution_tab_raw,
    .sns_ops = &s_s5k3l8xxm3_ops_tab,
    .raw_info_ptr = &s_s5k3l8xxm3_mipi_raw_info_ptr,
    .ext_info_ptr = NULL,

    .video_tab_info_ptr = 0,
    .sensor_version_info = (cmr_s8 *)"s5k3l8xxm3_v1"
};
#endif

